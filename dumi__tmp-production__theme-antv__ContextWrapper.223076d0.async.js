"use strict";(self.webpackChunk_antv_ava_site=self.webpackChunk_antv_ava_site||[]).push([[2643],{11698:function(n,e,t){t.d(e,{w:function(){return a}});var a=(0,t(67294).createContext)({})},4200:function(n,e,t){t.r(e),t.d(e,{default:function(){return o}});t(67294);var a=t(85956),s=t(11698),i=t(48521);function o(){var n=(0,a.pC)();return(0,i.jsx)(s.w.Provider,{value:{meta:{exampleTopics:[{id:"components",title:{zh:"React 组件",en:"React Components"},examples:[{demos:[{id:"basic",screenshot:"https://gw.alipayobjects.com/mdn/rms_fabca5/afts/img/A*Bd18ToZd2WEAAAAAAAAAAAAAARQnAQ",source:"import React from 'react';\n\nimport ReactDOM from 'react-dom';\nimport { AutoChart } from '@antv/auto-chart';\n\nconst data = [\n  { f1: '2019-01', f2: 100 },\n  { f1: '2019-02', f2: 300 },\n  { f1: '2019-03', f2: 340 },\n  { f1: '2019-04', f2: 330 },\n];\n\nReactDOM.render(<AutoChart data={data} />, document.getElementById('container'));\n",title:{en:"Basic AutoChart usage",zh:"基础 AutoChart 用法"},filename:"basic.jsx",isNew:!1},{id:"mock",screenshot:"https://gw.alipayobjects.com/mdn/rms_fabca5/afts/img/A*g2xbTZciph8AAAAAAAAAAAAAARQnAQ",source:"import React from 'react';\n\nimport ReactDOM from 'react-dom';\nimport { AutoChart } from '@antv/auto-chart';\n\nReactDOM.render(<AutoChart />, document.getElementById('container'));\n",title:{en:"AutoChart mock data",zh:"AutoChart 无数据状态"},filename:"mock.jsx",isNew:!1}],icon:"",id:"auto-chart",title:{en:"AutoChart",zh:"AutoChart 示例"},childrenKey:"demos",order:0}],childrenKey:"examples"},{id:"data-wizard",title:{zh:"数据处理（DataWizard）",en:"DataWizard"},examples:[{demos:[{id:"df",screenshot:"https://gw.alipayobjects.com/zos/antfincdn/4qbDDKfhu2/DataFrame.gif",source:"import React, { useState } from 'react';\n\nimport ReactDOM from 'react-dom';\nimport { Divider, Input, Alert } from 'antd';\nimport { DataFrame } from '@antv/data-wizard';\nimport ReactJson from 'react-json-view';\n\nconst { TextArea } = Input;\n\nconst App = () => {\n  const [data, setData] = useState([\n    { city: 'Shanghai', population: 24281400 },\n    { city: 'Chengdu', population: 20938000 },\n    { city: 'Hangzhou', population: 11936010 },\n    { city: 'Beijing', population: 21893000 },\n    { city: 'Chongqing', population: 30170000 },\n    { city: 'Changsha', population: 10047914 },\n    { city: 'Wuhan', population: 11212000 },\n    { city: 'Nanchang', population: 6255000 },\n    { city: 'Lanzhou', population: 3319200 },\n    { city: 'Guangzhou', population: 18676600 },\n  ]);\n  const [textAreaValue, setTextAreaValue] = useState(JSON.stringify(data));\n  const [errorMessage, setErrorMessage] = useState('');\n  const df = new DataFrame(data);\n\n  return (\n    <div>\n      <div\n        style={{\n          display: 'flex',\n          justifyContent: 'space-between',\n          alignItems: 'center',\n          marginBottom: '8px',\n          height: '32px',\n        }}\n      >\n        <h3 style={{ marginBottom: 0 }}>Data</h3>\n        {errorMessage ? <Alert message={errorMessage} style={{ padding: '4px' }} type=\"error\" closable /> : null}\n      </div>\n      <TextArea\n        style={{ resize: 'none', height: '120px' }}\n        value={textAreaValue}\n        onChange={(e) => {\n          const newValue = e.target.value;\n          try {\n            const newData = JSON.parse(newValue);\n            setData(newData);\n            setErrorMessage('');\n          } catch {\n            setErrorMessage('Please input standard JSON');\n          } finally {\n            setTextAreaValue(newValue);\n          }\n        }}\n      />\n      <Divider />\n      <div style={{ display: 'flex', justifyContent: 'space-between' }}>\n        <div style={{ flexBasis: '300px' }}>\n          <h3>DF Structure</h3>\n          <div style={{ height: '300px', overflowY: 'scroll', border: '2px solid #eee', padding: '20px' }}>\n            <ReactJson src={df} collapsed={1} />\n          </div>\n        </div>\n        <div style={{ flexBasis: '300px' }}>\n          <h3>Tabular DF data</h3>\n          <div\n            style={{ width: '300px', height: '300px', overflow: 'scroll', border: '2px solid #eee', padding: '20px' }}\n          >\n            <pre>{df.toString()}</pre>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nReactDOM.render(<App />, document.getElementById('container'));\n",title:{zh:"读取数据",en:"Read data"},filename:"df.jsx",isNew:!1},{id:"info",screenshot:"https://gw.alipayobjects.com/zos/antfincdn/BTQp84MnNH/DF-info.gif",source:"import React, { useState } from 'react';\n\nimport ReactDOM from 'react-dom';\nimport { Divider, Input, Alert } from 'antd';\nimport { DataFrame } from '@antv/data-wizard';\nimport ReactJson from 'react-json-view';\n\nconst { TextArea } = Input;\n\nconst App = () => {\n  const [data, setData] = useState([\n    { city: 'Shanghai', population: 24281400 },\n    { city: 'Chengdu', population: 20938000 },\n    { city: 'Hangzhou', population: 11936010 },\n    { city: 'Beijing', population: 21893000 },\n    { city: 'Chongqing', population: 30170000 },\n    { city: 'Changsha', population: 10047914 },\n    { city: 'Wuhan', population: 11212000 },\n    { city: 'Nanchang', population: 6255000 },\n    { city: 'Lanzhou', population: 3319200 },\n    { city: 'Guangzhou', population: 18676600 },\n  ]);\n  const [textAreaValue, setTextAreaValue] = useState(JSON.stringify(data));\n  const [errorMessage, setErrorMessage] = useState('');\n  const df = new DataFrame(data);\n\n  return (\n    <div>\n      <div\n        style={{\n          display: 'flex',\n          justifyContent: 'space-between',\n          alignItems: 'center',\n          marginBottom: '8px',\n          height: '32px',\n        }}\n      >\n        <h3 style={{ marginBottom: 0 }}>Data</h3>\n        {errorMessage ? <Alert message={errorMessage} style={{ padding: '4px' }} type=\"error\" closable /> : null}\n      </div>\n      <TextArea\n        style={{ resize: 'none', height: '120px' }}\n        value={textAreaValue}\n        onChange={(e) => {\n          const newValue = e.target.value;\n          try {\n            const newData = JSON.parse(newValue);\n            setData(newData);\n            setErrorMessage('');\n          } catch {\n            setErrorMessage('Please input standard JSON');\n          } finally {\n            setTextAreaValue(newValue);\n          }\n        }}\n      />\n      <Divider />\n      <h3>Field Information (df.info())</h3>\n      <div style={{ height: '300px', overflowY: 'scroll', border: '2px solid #eee', padding: '20px' }}>\n        <ReactJson src={df.info()} collapsed={1} />\n      </div>\n    </div>\n  );\n};\n\nReactDOM.render(<App />, document.getElementById('container'));\n",title:{zh:"数据字段分析",en:"Data field analysis"},filename:"info.jsx",isNew:!1}],icon:"",id:"data-frame",title:{en:"DataFrame",zh:"DataFrame 示例"},childrenKey:"demos",order:0},{demos:[{id:"index",screenshot:"https://gw.alipayobjects.com/zos/antfincdn/WLciSdHENb/statistics.gif",source:"import React, { useState } from 'react';\n\nimport ReactDOM from 'react-dom';\nimport { Divider, Select, Input } from 'antd';\nimport { statistics } from '@antv/data-wizard';\n\nconst { Option } = Select;\nconst { TextArea } = Input;\n\nconst data1 = [1, 2, 3, 999, 201, 519, 10];\nconst data2 = [500, 120, 299, 2, 19, 1997, 2019];\nconst methods = [\n  'min',\n  'minIndex',\n  'max',\n  'maxIndex',\n  'sum',\n  'mean',\n  'geometricMean',\n  'harmonicMean',\n  'median',\n  'quartile',\n  'quantile, percent75',\n  'variance',\n  'standardDeviation',\n  'coefficientOfVariance',\n  'covariance',\n  'pearson',\n  'valid',\n  'missing',\n  'valueMap',\n  'distinct',\n];\n\nconst App = () => {\n  const [method, setMethod] = useState(methods[0]);\n\n  const onChange = (value) => {\n    setMethod(value);\n  };\n\n  const getData = () => {\n    if (method === 'covariance' || method === 'pearson') {\n      return `${JSON.stringify(data1)}\\n${JSON.stringify(data2)}`;\n    }\n    return `${JSON.stringify(data1)}`;\n  };\n\n  const getValue = () => {\n    if (method === 'covariance' || method === 'pearson') {\n      return JSON.stringify(statistics[method](data1, data2));\n    }\n    if (method === 'quantile, percent75') {\n      return `${JSON.stringify(statistics.quantile(data1, 75))}`;\n    }\n    return `${JSON.stringify(statistics[method](data1))}`;\n  };\n\n  return (\n    <div>\n      <h3>Statistical Method</h3>\n      <Select style={{ width: '300px' }} defaultValue={methods[0]} onChange={onChange}>\n        {methods.map((m) => (\n          <Option key={m}>{m}</Option>\n        ))}\n      </Select>\n      <Divider />\n      <div style={{ display: 'flex', justifyContent: 'space-between' }}>\n        <div style={{ flexBasis: '300px' }}>\n          <h3>Data</h3>\n          <TextArea\n            style={{ resize: 'none', height: '100px', border: '2px solid #eee', padding: '20px' }}\n            value={getData()}\n          />\n        </div>\n        <div style={{ flexBasis: '300px' }}>\n          <h3>Result</h3>\n          <TextArea\n            style={{ resize: 'none', height: '100px', border: '2px solid #eee', padding: '20px' }}\n            value={getValue()}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nReactDOM.render(<App />, document.getElementById('container'));\n",title:{zh:"常用统计学方法示例",en:"Statistical methods"},filename:"index.jsx",isNew:!1},{id:"complex",screenshot:"https://gw.alipayobjects.com/zos/antfincdn/Gin%24lBO%26MG/statistics-complex.gif",source:"import React, { useState } from 'react';\n\nimport ReactDOM from 'react-dom';\nimport { Divider, Select, Input } from 'antd';\nimport { statistics } from '@antv/data-wizard';\n\nconst { Option } = Select;\nconst { TextArea } = Input;\n\nconst data1 = [{ n: 1 }, { n: 2 }];\nconst data2 = [\n  {\n    dim: 1,\n    n: 1,\n  },\n  {\n    dim: 2,\n    n: 2,\n    m: 2,\n  },\n  {\n    dim: 3,\n    n: 3,\n    k: 3,\n  },\n  {\n    dim: 2,\n    n: 4,\n    p: 4,\n  },\n];\n\nconst targetMeasure1 = 'n';\nconst targetMeasure2 = 'dim';\n\nconst methods = ['minBy', 'maxBy', 'sumBy', 'meanBy', 'countBy', 'groupBy', 'aggregate'];\n\nconst App = () => {\n  const [method, setMethod] = useState(methods[0]);\n\n  const onChange = (value) => {\n    setMethod(value);\n  };\n\n  return (\n    <div>\n      <h3>Statistical Method</h3>\n      <Select style={{ width: '300px' }} defaultValue={methods[0]} onChange={onChange}>\n        {methods.map((m) => (\n          <Option key={m}>{m}</Option>\n        ))}\n      </Select>\n      <Divider />\n      <div style={{ display: 'flex', justifyContent: 'space-between' }}>\n        <div style={{ flexBasis: '300px' }}>\n          <h3>Data</h3>\n          <TextArea\n            style={{ resize: 'none', height: '100px', border: '2px solid #eee', padding: '20px' }}\n            value={method !== 'aggregate' ? JSON.stringify(data1) : JSON.stringify(data2)}\n          />\n        </div>\n        <div style={{ flexBasis: '300px' }}>\n          <h3>Result</h3>\n          <TextArea\n            style={{ resize: 'none', height: '100px', border: '2px solid #eee', padding: '20px' }}\n            value={\n              method !== 'aggregate'\n                ? JSON.stringify(statistics[method](data1, targetMeasure1))\n                : JSON.stringify(statistics[method](data2, targetMeasure2, targetMeasure1))\n            }\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nReactDOM.render(<App />, document.getElementById('container'));\n",title:{zh:"复杂对象的统计学方法",en:"Statistical methods for complex object"},filename:"complex.jsx",isNew:!1}],icon:"",id:"statistics",title:{en:"Statistics",zh:"统计学方法"},childrenKey:"demos",order:1},{demos:[{id:"index",screenshot:"https://gw.alipayobjects.com/zos/antfincdn/VopHAgkeMZ/random.gif",source:"import React, { useState } from 'react';\n\nimport ReactDOM from 'react-dom';\nimport { Input, Select, Divider } from 'antd';\nimport { random } from '@antv/data-wizard';\n\nconst { TextArea } = Input;\nconst { Option } = Select;\n\nconst randomCategories = [\n  'BasicRandom',\n  'TextRandom',\n  'DateTimeRandom',\n  'ColorRandom',\n  'WebRandom',\n  'LocationRandom',\n  'AddressRandom',\n];\nconst randomTypes = {\n  BasicRandom: ['boolean', 'integer', 'float', 'natural'],\n  TextRandom: [\n    'character',\n    'string',\n    'syllable',\n    'word',\n    'sentence',\n    'paragraph',\n    'name',\n    'surname',\n    'givenName',\n    'phone',\n    'cCharacter',\n    'cWord',\n    'cSentence',\n    'cParagraph',\n    'cName',\n    'cGivenName',\n    'cSurname',\n    'cZodiac',\n  ],\n  DateTimeRandom: ['date', 'time', 'datetime', 'timestamp', 'weekday', 'month'],\n  ColorRandom: ['rgb', 'rgba', 'hsl', 'hsla', 'colorName', 'hexColor', 'decimalColor'],\n  WebRandom: ['tld', 'domain', 'url', 'ipv4', 'ipv6', 'email'],\n  LocationRandom: ['longtitude', 'latitude', 'coordinates'],\n  AddressRandom: ['country', 'province', 'city', 'district', 'road', 'address', 'postcode'],\n};\n\nconst R = new random.Random();\n\nconst App = () => {\n  const [types, setTypes] = useState(randomTypes[randomCategories[0]]);\n  const [type, setType] = useState(randomTypes[randomCategories[0]][0]);\n\n  const onCategoryChange = (value) => {\n    setTypes(randomTypes[value]);\n    setType(randomTypes[value][0]);\n  };\n\n  const onTypeChange = (value) => {\n    setType(value);\n  };\n\n  return (\n    <div>\n      <h3>Random Type</h3>\n      <Select\n        style={{ width: '240px', marginRight: '20px' }}\n        defaultValue={randomCategories[0]}\n        onChange={onCategoryChange}\n      >\n        {randomCategories.map((c) => (\n          <Option key={c}>{c}</Option>\n        ))}\n      </Select>\n      <Select style={{ width: '240px' }} value={type} onChange={onTypeChange}>\n        {types.map((t) => (\n          <Option key={t}>{t}</Option>\n        ))}\n      </Select>\n      <Divider />\n      <h3>Data</h3>\n      <TextArea style={{ resize: 'none', width: '500px', height: '100px' }} value={JSON.stringify(R[type]())} />\n    </div>\n  );\n};\n\nReactDOM.render(<App />, document.getElementById('container'));\n",title:{zh:"模拟数据生成示例",en:"Data mocking"},filename:"index.jsx",isNew:!1}],icon:"",id:"random",title:{en:"Random",zh:"数据模拟方法"},childrenKey:"demos",order:2}],childrenKey:"examples"},{id:"ckb",title:{zh:"图表知识库（CKB)",en:"Chart Knowledge Base (CKB)"},examples:[{demos:[{id:"chartdic",screenshot:"https://gw.alipayobjects.com/mdn/rms_fabca5/afts/img/A*TOjFQ6PQwyEAAAAAAAAAAAAAARQnAQ",source:"import React from 'react';\n\nimport ReactDOM from 'react-dom';\nimport Thumbnails from '@antv/thumbnails';\nimport { Thumbnail } from '@antv/thumbnails-component';\nimport { Popover } from 'antd';\n// import\nimport { CKBJson } from '@antv/ckb';\n\nconst chartTypeList = Object.keys(Thumbnails);\n\nconst ckb = CKBJson('en-US', true);\n\nconst ViewAll = () =>\n  chartTypeList.map((item) => {\n    const { name, alias, def, purpose, coord, shape, channel } = ckb[item];\n\n    const content = (\n      <div>\n        <h3>{name}</h3>\n        <h4>Alias</h4>\n        <p>\n          <small>{alias.toString() || '-'}</small>\n        </p>\n        <h4>Definition</h4>\n        <p>\n          <small>{def || '-'}</small>\n        </p>\n        <h4>Purposes</h4>\n        <p>\n          <small>{purpose.toString() || '-'}</small>\n        </p>\n        <h4>Coordinate</h4>\n        <p>\n          <small>{coord.toString() || '-'}</small>\n        </p>\n        <h4>Shape</h4>\n        <p>\n          <small>{shape.toString() || '-'}</small>\n        </p>\n        <h4>Channels</h4>\n        <p>\n          <small>{channel.toString() || '-'}</small>\n        </p>\n      </div>\n    );\n\n    return (\n      <div\n        className=\"grid\"\n        style={{\n          display: 'inline-block',\n          margin: '6px',\n          border: '1px solid LightSteelBlue',\n        }}\n        key={item}\n      >\n        <Popover\n          placement=\"right\"\n          content={content}\n          overlayStyle={{ maxWidth: '300px' }}\n          mouseLeaveDelay={0}\n          arrowPointAtCenter\n        >\n          <div className=\"thumbnail\" style={{ textAlign: 'center' }}>\n            <Thumbnail chart={item} style={{ margin: '4px', width: '140px', height: '140px' }} />\n          </div>\n        </Popover>\n      </div>\n    );\n  });\n\nReactDOM.render(<ViewAll />, document.getElementById('container'));\n",title:{zh:"使用 CKB 制作图表词典",en:"Chart Dictionary by CKB"},filename:"chartdic.jsx",isNew:!1}],icon:"",id:"CKBJson",title:{en:"CKB Application",zh:"CKB 的应用"},childrenKey:"demos",order:0}],childrenKey:"examples"},{id:"chart-advisor",title:{zh:"图表推荐（ChartAdvisor）",en:"ChartAdvisor"},examples:[{demos:[{id:"ca-steps",screenshot:"https://gw.alipayobjects.com/zos/antfincdn/SuynCPdHr/ca-steps.gif",source:"import { CaretDownOutlined } from '@ant-design/icons';\n// import\nimport { ChartAdvisor } from '@antv/chart-advisor';\nimport { Dropdown, Menu, Radio } from 'antd';\nimport { ChartView, JSONView, LintCard, StepBar, TableView } from 'antv-site-demo-rc';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nconst myChartAdvisor = new ChartAdvisor();\n\n// contants\n\nconst defaultData = [\n  { price: 100, type: 'A' },\n  { price: 120, type: 'B' },\n  { price: 150, type: 'C' },\n];\n\nconst dataRadioOptions = [\n  { label: 'JSON', value: 'JSON' },\n  { label: 'Table', value: 'Table' },\n];\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      currentStep: 0,\n      data: defaultData,\n      results: myChartAdvisor.advise({ data: defaultData }),\n      currentResult: 0,\n      dataRadioValue: 'Table',\n    };\n\n    this.myRef = React.createRef();\n  }\n\n  onStepChange = (currentStep) => {\n    this.setState({ currentStep });\n  };\n\n  onDataRadioChange = (e) => {\n    this.setState({\n      dataRadioValue: e.target.value,\n    });\n  };\n\n  onAdviceMenuClick = (e) => {\n    const index = parseInt(e.key.split('-')[0], 10);\n    this.setState({\n      currentResult: index,\n    });\n  };\n\n  render() {\n    const { currentStep, results, currentResult, data, dataRadioValue } = this.state;\n\n    const dataContent = (\n      <>\n        <Radio.Group\n          options={dataRadioOptions}\n          onChange={this.onDataRadioChange}\n          value={dataRadioValue}\n          optionType=\"button\"\n          buttonStyle=\"solid\"\n        />\n        {dataRadioValue === 'Table' ? <TableView data={data} tableWidth={200} /> : <JSONView json={data} />}\n      </>\n    );\n    const advicesMenu = (\n      <Menu onClick={this.onAdviceMenuClick} selectedKeys={[currentResult]}>\n        {(results || []).map((item, index) => {\n          return <Menu.Item key={`${index}-${item.type}`}>{`${index}: ${item.type}`}</Menu.Item>;\n        })}\n      </Menu>\n    );\n\n    const resultContent = (\n      <>\n        <Dropdown menu={advicesMenu} placement=\"bottomLeft\" trigger={['click']} disabled={!results}>\n          <a className=\"ant-dropdown-link\" onClick={(e) => e.preventDefault()}>\n            {!results ? 'no advice' : `Advice ${currentResult}`} <CaretDownOutlined />\n          </a>\n        </Dropdown>\n        <JSONView json={results[currentResult]} />\n      </>\n    );\n\n    const plotContent = (\n      <>\n        <LintCard lintProblems={results[currentResult].lint} />\n        <ChartView chartRef={this.myRef} spec={results[currentResult].spec} />\n      </>\n    );\n\n    // manifest\n\n    const steps = [\n      {\n        title: 'Data',\n        desc: 'Source data:',\n        content: dataContent,\n      },\n      {\n        title: 'Results',\n        desc: 'Advices with lint recommended from data:',\n        content: resultContent,\n      },\n      {\n        title: 'Chart',\n        desc: 'Render chart but you also know the limits.',\n        content: plotContent,\n      },\n    ];\n\n    return (\n      <>\n        <StepBar current={currentStep} onChange={this.onStepChange} steps={steps} />\n\n        <p>{steps[currentStep].desc}</p>\n\n        <div className=\"steps-content\" style={{ height: 'calc(100% - 80px)' }}>\n          {steps[currentStep].content}\n        </div>\n      </>\n    );\n  }\n}\n\nReactDOM.render(<App />, document.getElementById('container'));\n",title:{en:"Data to ChartAdvisor",zh:"从数据到 ChartAdvisor 推荐/优化图表"},filename:"ca-steps.jsx",isNew:!1},{id:"ca",screenshot:"https://gw.alipayobjects.com/zos/antfincdn/KrLqirDT8/ca.png",source:"import React from 'react';\n\nimport ReactDOM from 'react-dom';\nimport { PagList, JSONView } from 'antv-site-demo-rc';\n// import\nimport { ChartAdvisor } from '@antv/chart-advisor';\n\n// contants\n\nconst defaultData = [\n  { price: 100, type: 'A' },\n  { price: 120, type: 'B' },\n  { price: 150, type: 'C' },\n];\n\n// usage\nconst myChartAdvisor = new ChartAdvisor();\nconst results = myChartAdvisor.advise({ data: defaultData });\n\nconst App = () => (\n  <PagList\n    data={results}\n    renderItem={(item) => <JSONView json={item} style={{ height: '100%' }} rjvConfigs={{ collapsed: 1 }} />}\n  />\n);\n\nReactDOM.render(<App />, document.getElementById('container'));\n",title:{en:"Basic ChartAdvisor",zh:"ChartAdvisor 基础用法"},filename:"ca.jsx",isNew:!1},{id:"custom-ckb-ca",screenshot:"https://gw.alipayobjects.com/zos/antfincdn/AZeiW7T8o/custom-ckb-ca.png",source:"import React from 'react';\n\nimport ReactDOM from 'react-dom';\nimport { PagList, JSONView } from 'antv-site-demo-rc';\n// import\nimport { ChartAdvisor } from '@antv/chart-advisor';\n\n// contants\n\nconst trickyData = [\n  { nom1: 'A', nom2: 'apple', nom3: 'red' },\n  { nom1: 'B', nom2: 'banana', nom3: 'yellow' },\n  { nom1: 'C', nom2: 'carrot', nom3: 'orange' },\n];\n\n// custom chart\nconst triNominalChart = {\n  id: 'trinominal_chart',\n  name: 'TriNominal Chart',\n  alias: ['three cate chart'],\n  family: ['MultiNominalCharts'],\n  def: 'This chart takes three nominal fields for encoding.',\n  purpose: ['Comparison'],\n  coord: ['Cartesian2D'],\n  category: ['Statistic'],\n  shape: ['Square'],\n  dataPres: [{ minQty: 3, maxQty: 3, fieldConditions: ['Nominal'] }],\n  channel: ['Position', 'Color'],\n  recRate: 'Use with Caution',\n};\n\n// custom chart to spec logic\nconst toTriNominal = (data, dataProps) => {\n  const field4X = dataProps[0];\n  const field4Y = dataProps[1];\n  const field4Color = dataProps[2];\n\n  if (!field4X || !field4Y || !field4Color) return null;\n\n  const spec = {\n    basis: {\n      type: 'chart',\n    },\n    data: {\n      type: 'json-array',\n      values: data,\n    },\n    layer: [\n      {\n        mark: 'rect',\n        encoding: {\n          x: {\n            field: field4X.name,\n            type: 'nominal',\n          },\n          color: {\n            field: field4Color.name,\n            type: 'nominal',\n          },\n          y: {\n            field: field4Y.name,\n            type: 'nominal',\n          },\n        },\n      },\n    ],\n  };\n\n  return spec;\n};\n\ntriNominalChart.toSpec = toTriNominal;\n\n// custom CKB config\nconst myCKBCfg = {\n  include: ['line_chart', 'pie_chart'], // only include 2 of origin charts\n  custom: { trinominal_chart: triNominalChart }, // and a custom chart\n};\n\n// usage\nconst myChartAdvisor = new ChartAdvisor({ ckbCfg: myCKBCfg });\n\nconst results = myChartAdvisor.advise({ data: trickyData });\n\nconst App = () => (\n  <PagList data={results} renderItem={(item) => <JSONView json={item} rjvConfigs={{ collapsed: 1 }} />} />\n);\n\nReactDOM.render(<App />, document.getElementById('container'));\n",title:{en:"Custom CKB for ChartAdvisor",zh:"定制 ChartAdvisor 所使用的 CKB"},filename:"custom-ckb-ca.jsx",isNew:!1},{id:"custom-rules-ca",screenshot:"https://gw.alipayobjects.com/zos/antfincdn/lEJg8nD9R/custom-rules-ca.png",source:"import React from 'react';\n\nimport ReactDOM from 'react-dom';\nimport { PagList, JSONView } from 'antv-site-demo-rc';\n// import\nimport { ChartAdvisor } from '@antv/chart-advisor';\n\n// contants\n\nconst trickyData = [\n  { price: 520, year: 2005 },\n  { price: 600, year: 2006 },\n  { price: 1500, year: 2007 },\n];\n\n// The data above should has a line chart as an advice.\n// But, assume we don't like any line chart with a 'year' field:\n\n// custom rule\nconst myRule = {\n  id: 'no-line-chart-with-year',\n  type: 'HARD',\n  docs: {\n    lintText: \"We do not use line chart if there is any field named 'year'\",\n  },\n  trigger: (args) => {\n    const { chartType } = args;\n    return chartType === 'line_chart';\n  },\n  validator: (args) => {\n    let result = 1;\n    const { dataProps } = args;\n    const fieldNames = dataProps.map((prop) => prop.name);\n    if (fieldNames.includes('year')) {\n      result = 0;\n    }\n    return result;\n  },\n};\n\n// custom rule Config\nconst myRuleCfg = {\n  custom: {\n    'no-line-chart-with-year': myRule,\n  },\n};\n\n// usage\nconst myChartAdvisor = new ChartAdvisor({ ruleCfg: myRuleCfg });\n\nconst results = myChartAdvisor.advise({ data: trickyData });\n\nconst App = () => (\n  <PagList data={results} renderItem={(item) => <JSONView json={item} rjvConfigs={{ collapsed: 1 }} />} />\n);\n\nReactDOM.render(<App />, document.getElementById('container'));\n",title:{en:"Custom rules for ChartAdvisor",zh:"定制 ChartAdvisor 所使用的规则"},filename:"custom-rules-ca.jsx",isNew:!1},{id:"custom-ckb-rules-ca",screenshot:"https://gw.alipayobjects.com/zos/antfincdn/Rw0cVZ%26ZW/custom-ckb-rules-ca.gif",source:"import React, { useRef, useState } from 'react';\n\nimport ReactDOM from 'react-dom';\nimport { ChartView, JSONView, StepBar, TableView, PagList } from 'antv-site-demo-rc';\n// import\nimport { ChartAdvisor } from '@antv/chart-advisor';\n\n// contants\n\nconst trickyData = [\n  { field1: 'A', field2: 10 },\n  { field1: 'B', field2: 10 },\n  { field1: 'C', field2: 10 },\n];\n\n// custom chart\nconst ironBallChart = {\n  id: 'ironball_chart',\n  name: 'IronBall Chart',\n  alias: ['solidball'],\n  family: ['PieCharts'],\n  def: 'A funny chart.',\n  purpose: ['Comparison'],\n  coord: ['Cartesian2D'],\n  category: ['Statistic'],\n  shape: ['Round'],\n  dataPres: [\n    { minQty: 1, maxQty: '*', fieldConditions: ['Nominal'] },\n    { minQty: 1, maxQty: '*', fieldConditions: ['Interval'] },\n  ],\n  channel: ['Angle', 'Area', 'Color'],\n  recRate: 'Use with Caution',\n};\n\n// custom chart to spec logic\nconst toIronball = (data, dataProps) => {\n  const fieldInterval = dataProps.find((field) => field.levelOfMeasurements.includes('Interval'));\n  const fieldNominal = dataProps.find((field) => field.levelOfMeasurements.includes('Nominal'));\n\n  if (!fieldInterval) return null;\n\n  const spec = {\n    basis: {\n      type: 'chart',\n    },\n    data: {\n      type: 'json-array',\n      values: data,\n    },\n    layer: [\n      {\n        mark: 'arc',\n        encoding: {\n          theta: {\n            field: fieldInterval.name,\n            type: 'quantitative',\n          },\n        },\n      },\n    ],\n  };\n\n  if (fieldNominal) {\n    spec.layer[0].encoding.color = {\n      field: fieldNominal.name,\n      type: 'quantitative',\n      scale: {\n        range: ['#686971'],\n      },\n    };\n  }\n\n  return spec;\n};\n\nironBallChart.toSpec = toIronball;\n\n// custom CKB config\nconst myCKBCfg = {\n  custom: { ironball_chart: ironBallChart },\n};\n\n// custom rule\nconst myRule = {\n  id: 'same-value-ironball',\n  type: 'SOFT',\n  docs: {\n    lintText: 'I just like ironball while values of measure are all same.',\n  },\n  trigger: (args) => {\n    const { chartType } = args;\n    return chartType === 'ironball_chart';\n  },\n  validator: (args) => {\n    let result = 1;\n    const { dataProps } = args;\n    const measureFieldProps = dataProps.find((field) => field.levelOfMeasurements.includes('Interval'));\n\n    if (!measureFieldProps || measureFieldProps.distinct !== 1) {\n      result = 0;\n    }\n    return result;\n  },\n};\n\n// custom rule Config\nconst myRuleCfg = {\n  custom: {\n    'same-value-ironball': myRule,\n  },\n};\n\n// usage\nconst myChartAdvisor = new ChartAdvisor({ ckbCfg: myCKBCfg, ruleCfg: myRuleCfg });\n\nconst results = myChartAdvisor.advise({ data: trickyData });\n\nconst App = () => {\n  const [currentStep, setCurrentStep] = useState(0);\n  const myRef = useRef();\n\n  const onStepChange = (step) => {\n    setCurrentStep(step);\n  };\n\n  const ckbContent = (\n    <>\n      const myCKBCfg =\n      <JSONView json={myCKBCfg} rjvConfigs={{ collapsed: 3 }} />\n    </>\n  );\n\n  const ruleContent = (\n    <>\n      const myRuleCfg =\n      <JSONView json={myRuleCfg} rjvConfigs={{ collapsed: 3 }} />\n    </>\n  );\n\n  const resultContent = (\n    <>\n      data:\n      <TableView data={trickyData} s2Configs={{ adaptive: true }} tableWidth={260} style={{ height: 140 }} />\n      <br />\n      results:\n      <PagList\n        data={results}\n        renderItem={(item) => <JSONView json={item} style={{ height: 300 }} rjvConfigs={{ collapsed: 2 }} />}\n      />\n      <br />\n      top1 chart:\n      <ChartView chartRef={myRef} spec={results[0].spec} />\n      <br />\n    </>\n  );\n\n  const steps = [\n    {\n      title: 'myCKB',\n      desc: 'Define your chart as a CKB object. Define the `toSpec` function to compile that chart. Add your custom chart to CKB.',\n      content: ckbContent,\n    },\n    {\n      title: 'myRules',\n      desc: 'Define your rule and add it into Advisor.',\n      content: ruleContent,\n    },\n    {\n      title: 'result',\n      desc: 'Results of your custom system:',\n      content: resultContent,\n    },\n  ];\n\n  return (\n    <>\n      <StepBar current={currentStep} onChange={onStepChange} steps={steps} />\n\n      <p>{steps[currentStep].desc}</p>\n\n      <div className=\"steps-content\" style={{ height: 'calc(100% - 80px)' }}>\n        {steps[currentStep].content}\n      </div>\n    </>\n  );\n};\n\nReactDOM.render(<App />, document.getElementById('container'));\n",title:{en:"Custom CKB and rules for ChartAdvisor",zh:"定制 ChartAdvisor 所使用的 CKB 和规则"},filename:"custom-ckb-rules-ca.jsx",isNew:!1}],icon:"",id:"advise-and-lint",title:{en:"ChartAdvisor - advise and lint",zh:"完整使用 ChartAdvisor"},childrenKey:"demos",order:0},{demos:[{id:"advisor-steps",screenshot:"https://gw.alipayobjects.com/zos/antfincdn/HkgFEc28b/advisor-steps.gif",source:"import { CaretDownOutlined } from '@ant-design/icons';\nimport { Advisor } from '@antv/chart-advisor';\nimport { Dropdown, Menu, Radio } from 'antd';\nimport { ChartView, JSONView, StepBar, TableView } from 'antv-site-demo-rc';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nconst myAdvisor = new Advisor();\n\n// contants\n\nconst defaultData = [\n  { year: '2007', sales: 28 },\n  { year: '2008', sales: 55 },\n  { year: '2009', sales: 43 },\n  { year: '2010', sales: 91 },\n  { year: '2011', sales: 81 },\n  { year: '2012', sales: 53 },\n  { year: '2013', sales: 19 },\n  { year: '2014', sales: 87 },\n  { year: '2015', sales: 52 },\n];\n\nconst dataRadioOptions = [\n  { label: 'JSON', value: 'JSON' },\n  { label: 'Table', value: 'Table' },\n];\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      currentStep: 0,\n      data: defaultData,\n      advices: myAdvisor.advise({ data: defaultData }),\n      currentAdvice: 0,\n      dataRadioValue: 'Table',\n    };\n\n    this.myRef = React.createRef();\n  }\n\n  onStepChange = (currentStep) => {\n    this.setState({ currentStep });\n  };\n\n  onDataRadioChange = (e) => {\n    this.setState({\n      dataRadioValue: e.target.value,\n    });\n  };\n\n  onAdviceMenuClick = (e) => {\n    const index = parseInt(e.key.split('-')[0], 10);\n    this.setState({\n      currentAdvice: index,\n    });\n  };\n\n  render() {\n    const { currentStep, advices, currentAdvice, data, dataRadioValue } = this.state;\n\n    const dataContent = (\n      <>\n        <Radio.Group\n          options={dataRadioOptions}\n          onChange={this.onDataRadioChange}\n          value={dataRadioValue}\n          optionType=\"button\"\n          buttonStyle=\"solid\"\n        />\n        {dataRadioValue === 'Table' ? (\n          <TableView style={{ padding: 20 }} tableWidth={400} data={data} s2Configs={{ adaptive: true }} />\n        ) : (\n          <JSONView json={data} />\n        )}\n      </>\n    );\n    const advicesMenu = (\n      <Menu onClick={this.onAdviceMenuClick} selectedKeys={[this.state.currentAdvice]}>\n        {(advices || []).map((item, index) => {\n          return <Menu.Item key={`${index}-${item.type}`}>{`${index}: ${item.type}`}</Menu.Item>;\n        })}\n      </Menu>\n    );\n\n    const advicesContent = (\n      <>\n        <Dropdown menu={advicesMenu} placement=\"bottomLeft\" trigger={['click']} disabled={!advices}>\n          <a className=\"ant-dropdown-link\" onClick={(e) => e.preventDefault()}>\n            {!advices ? 'no advice' : `Advice ${this.state.currentAdvice}`} <CaretDownOutlined />\n          </a>\n        </Dropdown>\n        <JSONView json={advices[currentAdvice]} />\n      </>\n    );\n\n    const specContent = <JSONView json={advices[currentAdvice].spec} />;\n\n    const plotContent = <ChartView chartRef={this.myRef} spec={advices[currentAdvice].spec} />;\n\n    // manifest\n\n    const steps = [\n      {\n        title: 'Data',\n        desc: 'Source data:',\n        content: dataContent,\n      },\n      {\n        title: 'Advices',\n        desc: 'Advices list recommended from data:',\n        content: advicesContent,\n      },\n      {\n        title: 'Spec',\n        desc: 'Pick an advice and get its specification.',\n        content: specContent,\n      },\n      {\n        title: 'Chart',\n        desc: 'Render chart with specification.',\n        content: plotContent,\n      },\n    ];\n\n    return (\n      <>\n        <StepBar current={currentStep} onChange={this.onStepChange} steps={steps} />\n\n        <p>{steps[currentStep].desc}</p>\n\n        <div className=\"steps-content\" style={{ height: 'calc(100% - 80px)' }}>\n          {steps[currentStep].content}\n        </div>\n      </>\n    );\n  }\n}\n\nReactDOM.render(<App />, document.getElementById('container'));\n",title:{en:"Data to Advisor",zh:"从数据到 Advisor 推荐图表"},filename:"advisor-steps.jsx",isNew:!1},{id:"data-advisor",screenshot:"https://gw.alipayobjects.com/zos/antfincdn/y7adoyPqC/data-advisor.png",source:"import React from 'react';\n\nimport ReactDOM from 'react-dom';\nimport { PagList, JSONView } from 'antv-site-demo-rc';\n// import\nimport { Advisor } from '@antv/chart-advisor';\n\n// contants\n\nconst defaultData = [\n  { year: '2007', sales: 28 },\n  { year: '2008', sales: 55 },\n  { year: '2009', sales: 43 },\n  { year: '2010', sales: 91 },\n  { year: '2011', sales: 81 },\n  { year: '2012', sales: 53 },\n  { year: '2013', sales: 19 },\n  { year: '2014', sales: 87 },\n  { year: '2015', sales: 52 },\n];\n\n// usage\nconst myAdvisor = new Advisor();\nconst advices = myAdvisor.advise({ data: defaultData });\n\nconst App = () => (\n  <PagList\n    data={advices}\n    renderItem={(item) => <JSONView json={item} style={{ height: '100%' }} rjvConfigs={{ collapsed: 1 }} />}\n  />\n);\n\nReactDOM.render(<App />, document.getElementById('container'));\n",title:{en:"Basic Advisor",zh:"Advisor 基础用法"},filename:"data-advisor.jsx",isNew:!1},{id:"custom-ckb-advisor",screenshot:"https://gw.alipayobjects.com/zos/antfincdn/F5LoluYAc/custom-ckb-advisor.png",source:"import React from 'react';\n\nimport ReactDOM from 'react-dom';\nimport { PagList, JSONView } from 'antv-site-demo-rc';\n// import\nimport { Advisor } from '@antv/chart-advisor';\n\n// contants\n\nconst trickyData = [\n  { nom1: 'A', nom2: 'apple', nom3: 'red' },\n  { nom1: 'B', nom2: 'banana', nom3: 'yellow' },\n  { nom1: 'C', nom2: 'carrot', nom3: 'orange' },\n];\n\n// custom chart\nconst triNominalChart = {\n  id: 'trinominal_chart',\n  name: 'TriNominal Chart',\n  alias: ['three cate chart'],\n  family: ['MultiNominalCharts'],\n  def: 'This chart takes three nominal fields for encoding.',\n  purpose: ['Comparison'],\n  coord: ['Cartesian2D'],\n  category: ['Statistic'],\n  shape: ['Square'],\n  dataPres: [{ minQty: 3, maxQty: 3, fieldConditions: ['Nominal'] }],\n  channel: ['Position', 'Color'],\n  recRate: 'Use with Caution',\n};\n\n// custom chart to spec logic\nconst toTriNominal = (data, dataProps) => {\n  const field4X = dataProps[0];\n  const field4Y = dataProps[1];\n  const field4Color = dataProps[2];\n\n  if (!field4X || !field4Y || !field4Color) return null;\n\n  const spec = {\n    basis: {\n      type: 'chart',\n    },\n    data: {\n      type: 'json-array',\n      values: data,\n    },\n    layer: [\n      {\n        mark: 'rect',\n        encoding: {\n          x: {\n            field: field4X.name,\n            type: 'nominal',\n          },\n          color: {\n            field: field4Color.name,\n            type: 'nominal',\n          },\n          y: {\n            field: field4Y.name,\n            type: 'nominal',\n          },\n        },\n      },\n    ],\n  };\n\n  return spec;\n};\n\ntriNominalChart.toSpec = toTriNominal;\n\n// custom CKB config\nconst myCKBCfg = {\n  include: ['line_chart', 'pie_chart'], // only include 2 of origin charts\n  custom: { trinominal_chart: triNominalChart }, // and a custom chart\n};\n\n// usage\nconst myAdvisor = new Advisor({ ckbCfg: myCKBCfg });\n\nconst advices = myAdvisor.advise({ data: trickyData });\n\nconst App = () => (\n  <PagList\n    data={advices}\n    renderItem={(item) => <JSONView json={item} style={{ height: '100%' }} rjvConfigs={{ collapsed: 1 }} />}\n  />\n);\n\nReactDOM.render(<App />, document.getElementById('container'));\n",title:{en:"Custom CKB for Advisor",zh:"定制 Advisor 所使用的 CKB"},filename:"custom-ckb-advisor.jsx",isNew:!1},{id:"custom-rules-advisor",screenshot:"https://gw.alipayobjects.com/zos/antfincdn/Y%24Mua0oHX/custom-rules-advisor.png",source:"import React from 'react';\n\nimport ReactDOM from 'react-dom';\nimport { PagList, JSONView } from 'antv-site-demo-rc';\n// import\nimport { Advisor } from '@antv/chart-advisor';\n\n// contants\n\nconst trickyData = [\n  { price: 520, year: 2005 },\n  { price: 600, year: 2006 },\n  { price: 1500, year: 2007 },\n];\n\n// The data above should has a line chart as an advice.\n// But, assume we don't like any line chart with a 'year' field:\n\n// custom rule\nconst myRule = {\n  id: 'no-line-chart-with-year',\n  type: 'HARD',\n  docs: {\n    lintText: \"We do not use line chart if there is any field named 'year'\",\n  },\n  trigger: (args) => {\n    const { chartType } = args;\n    return chartType === 'line_chart';\n  },\n  validator: (args) => {\n    let result = 1;\n    const { dataProps } = args;\n    const fieldNames = dataProps.map((prop) => prop.name);\n    if (fieldNames.includes('year')) {\n      result = 0;\n    }\n    return result;\n  },\n};\n\n// custom rule Config\nconst myRuleCfg = {\n  custom: {\n    'no-line-chart-with-year': myRule,\n  },\n};\n\n// usage\nconst myAdvisor = new Advisor({ ruleCfg: myRuleCfg });\n\nconst advices = myAdvisor.advise({ data: trickyData });\n\nconst App = () => (\n  <PagList\n    data={advices}\n    renderItem={(item) => <JSONView json={item} style={{ height: '100%' }} rjvConfigs={{ collapsed: 1 }} />}\n  />\n);\n\nReactDOM.render(<App />, document.getElementById('container'));\n",title:{en:"Custom rules for Advisor",zh:"定制 Advisor 所使用的规则"},filename:"custom-rules-advisor.jsx",isNew:!1}],icon:"",id:"advisor-only",title:{en:"Advisor Only",zh:"仅使用 Advisor"},childrenKey:"demos",order:1},{demos:[{id:"linter-steps",screenshot:"https://gw.alipayobjects.com/zos/antfincdn/Gu8zDCffu/linter-steps.gif",source:"import React from 'react';\n\nimport ReactDOM from 'react-dom';\nimport { JSONView, ChartView, LintCard, StepBar } from 'antv-site-demo-rc';\nimport { Linter } from '@antv/chart-advisor';\n\nconst myLinter = new Linter();\n\n// contants\n\nconst errorSpec = {\n  basis: {\n    type: 'chart',\n  },\n  data: {\n    type: 'json-array',\n    values: [\n      { category: 'A', value: 4 },\n      { category: 'B', value: 6 },\n      { category: 'C', value: 10 },\n      { category: 'D', value: 3 },\n      { category: 'E', value: 7 },\n      { category: 'F', value: 8 },\n    ],\n  },\n  layer: [\n    {\n      mark: 'arc',\n      encoding: {\n        theta: { field: 'value', type: 'quantitative' },\n        color: {\n          field: 'category',\n          type: 'nominal',\n          scale: { range: ['#5b8ff9', '#753d91', '#b03c63', '#d5b471', '#4fb01f', '#608b7d'] },\n        },\n      },\n    },\n  ],\n};\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      currentStep: 0,\n      spec: errorSpec,\n      problems: myLinter.lint({ spec: errorSpec }),\n    };\n\n    this.myRef = React.createRef();\n  }\n\n  onStepChange = (currentStep) => {\n    this.setState({ currentStep });\n  };\n\n  render() {\n    const { currentStep, spec, problems } = this.state;\n\n    const plotContent = <ChartView chartRef={this.myRef} spec={spec} />;\n\n    const specContent = <JSONView json={spec} />;\n\n    const problemContent = (\n      <>\n        <LintCard lintProblems={problems} />\n        <JSONView json={problems} />\n      </>\n    );\n\n    // manifest\n\n    const steps = [\n      {\n        title: 'Chart',\n        desc: 'The design of this chart has some flaws:',\n        content: plotContent,\n      },\n      {\n        title: 'Spec',\n        desc: 'You can get the specification of the chart if it is drawn with AntV.',\n        content: specContent,\n      },\n      {\n        title: 'Problems',\n        desc: 'Linter will show you the problems:',\n        content: problemContent,\n      },\n    ];\n\n    return (\n      <>\n        <StepBar current={currentStep} onChange={this.onStepChange} steps={steps} />\n\n        <p>{steps[currentStep].desc}</p>\n\n        <div className=\"steps-content\" style={{ height: 'calc(100% - 80px)' }}>\n          {steps[currentStep].content}\n        </div>\n      </>\n    );\n  }\n}\n\nReactDOM.render(<App />, document.getElementById('container'));\n",title:{en:"Existing Chart to Linter",zh:"给定图表到 Linter 进行优化"},filename:"linter-steps.jsx",isNew:!1},{id:"chart-linter",screenshot:"https://gw.alipayobjects.com/zos/antfincdn/1bZn%26b5Os/chart-linter.gif",source:"import React, { useRef } from 'react';\n\nimport ReactDOM from 'react-dom';\nimport { ChartView, LintCard } from 'antv-site-demo-rc';\n// import\nimport { Linter } from '@antv/chart-advisor';\n\n// contants\n\nconst errorSpec = {\n  basis: {\n    type: 'chart',\n  },\n  data: {\n    type: 'json-array',\n    values: [\n      { category: 'A', value: 4 },\n      { category: 'B', value: 6 },\n      { category: 'C', value: 10 },\n      { category: 'D', value: 3 },\n      { category: 'E', value: 7 },\n      { category: 'F', value: 8 },\n    ],\n  },\n  layer: [\n    {\n      mark: 'arc',\n      encoding: {\n        theta: { field: 'value', type: 'quantitative' },\n        color: {\n          field: 'category',\n          type: 'nominal',\n          scale: { range: ['#5b8ff9', '#753d91', '#b03c63', '#d5b471', '#4fb01f', '#608b7d'] },\n        },\n      },\n    },\n  ],\n};\n\n// usage\nconst myLinter = new Linter();\nconst problems = myLinter.lint({ spec: errorSpec });\n\nconst App = () => {\n  const myRef = useRef();\n  return (\n    <>\n      <LintCard lintProblems={problems} />\n      <ChartView chartRef={myRef} spec={errorSpec} />\n    </>\n  );\n};\n\nReactDOM.render(<App />, document.getElementById('container'));\n",title:{en:"Basic Linter",zh:"Linter 基础用法"},filename:"chart-linter.jsx",isNew:!1},{id:"custom-rules-linter",screenshot:"https://gw.alipayobjects.com/zos/antfincdn/2Jjp04b6%26/custom-rules-linter.gif",source:"import React, { useRef } from 'react';\n\nimport ReactDOM from 'react-dom';\nimport { ChartView, LintCard } from 'antv-site-demo-rc';\n// import\nimport { Linter } from '@antv/chart-advisor';\n\n// contants\n\nconst iDontLikeSpec = {\n  basis: {\n    type: 'chart',\n  },\n  data: {\n    type: 'json-array',\n    values: [\n      { price: 520, year: 2005 },\n      { price: 600, year: 2006 },\n      { price: 1500, year: 2007 },\n    ],\n  },\n  layer: [\n    {\n      mark: {\n        type: 'line',\n      },\n      encoding: {\n        x: {\n          field: 'year',\n          type: 'temporal',\n        },\n        y: {\n          field: 'price',\n          type: 'quantitative',\n        },\n      },\n    },\n  ],\n};\n\n// custom rule\nconst myRule = {\n  id: 'no-line-chart-with-year',\n  type: 'HARD',\n  docs: {\n    lintText: \"We do not use line chart if there is any field named 'year'\",\n  },\n  trigger: (args) => {\n    const { chartType } = args;\n    return chartType === 'line_chart';\n  },\n  validator: (args) => {\n    let result = 1;\n    const { dataProps } = args;\n    const fieldNames = dataProps.map((prop) => prop.name);\n    if (fieldNames.includes('year')) {\n      result = 0;\n    }\n    return result;\n  },\n};\n\n// custom rule Config\nconst myRuleCfg = {\n  custom: {\n    'no-line-chart-with-year': myRule,\n  },\n};\n\n// usage\nconst myLinter = new Linter(myRuleCfg);\n\nconst problems = myLinter.lint({ spec: iDontLikeSpec });\n\nconst App = () => {\n  const myRef = useRef();\n  return (\n    <>\n      <LintCard lintProblems={problems} />\n      <ChartView chartRef={myRef} spec={iDontLikeSpec} />\n    </>\n  );\n};\n\nReactDOM.render(<App />, document.getElementById('container'));\n",title:{en:"Custom rules for Linter",zh:"定制 Linter 所使用的规则"},filename:"custom-rules-linter.jsx",isNew:!1},{id:"fixer",screenshot:"https://gw.alipayobjects.com/zos/antfincdn/kOe0rIsAR7/basic-fixer.gif",source:"import React, { useState, useRef } from 'react';\n\nimport ReactDOM from 'react-dom';\nimport { Badge, Popover, Checkbox } from 'antd';\nimport { Linter } from '@antv/chart-advisor';\nimport { ChartView } from 'antv-site-demo-rc';\n\nconst errorSpec = {\n  basis: {\n    type: 'chart',\n  },\n  data: {\n    type: 'json-array',\n    values: [\n      { type: 'furniture', sales: 38 },\n      { type: 'food', sales: 52 },\n      { type: 'fruit', sales: 61 },\n      { type: 'lights', sales: 145 },\n      { type: 'kitchen', sales: 48 },\n      { type: 'garden', sales: 38 },\n      { type: 'drink', sales: 38 },\n      { type: 'pets', sales: 38 },\n    ],\n  },\n  layer: [\n    {\n      mark: {\n        type: 'bar',\n      },\n      encoding: {\n        x: {\n          field: 'type',\n          type: 'nominal',\n        },\n        y: {\n          field: 'sales',\n          type: 'quantitative',\n          axis: {\n            min: 20,\n          },\n        },\n      },\n    },\n  ],\n};\n\nconst myLinter = new Linter();\n\nconst App = () => {\n  const chartRef = useRef(null);\n\n  const [rules, setRules] = useState(myLinter.lint({ spec: errorSpec }));\n  const [spec, setSpec] = useState(errorSpec);\n\n  const checkFix = (e, checkedRuleId) => {\n    const { checked } = e.target;\n    setRules(\n      rules.map((rule) => {\n        if (rule.id === checkedRuleId) {\n          if (checked) {\n            setSpec({\n              ...spec,\n              ...rule.fix,\n            });\n          } else {\n            setSpec(errorSpec);\n          }\n\n          return {\n            ...rule,\n            checked,\n          };\n        }\n        return rule;\n      })\n    );\n  };\n\n  const renderLinter =\n    rules.length > 0 ? (\n      <div>\n        <h3>This chart has the following improvements</h3>\n        <ul>\n          {rules.map((rule) => (\n            <li key={rule.id}>\n              <div>{rule.docs.lintText}</div>\n              <div>\n                <Checkbox checked={rule.checked} onChange={(e) => checkFix(e, rule.id)}>\n                  {rule.docs.fixText}\n                </Checkbox>\n              </div>\n            </li>\n          ))}\n        </ul>\n      </div>\n    ) : null;\n\n  return (\n    <div style={{ display: 'flex' }}>\n      <div style={{ flex: 8 }}>\n        <ChartView chartRef={chartRef} spec={spec} style={{ height: '300px' }} />\n      </div>\n      <div style={{ flex: 2 }}>\n        <Popover content={renderLinter} trigger=\"click\" placement=\"top\">\n          {rules.length > 0 ? (\n            <Badge count={rules.length} style={{ backgroundColor: '#873bf4', cursor: 'pointer' }} />\n          ) : (\n            <span>ChartLinter Loading...</span>\n          )}\n        </Popover>\n      </div>\n    </div>\n  );\n};\n\nReactDOM.render(<App />, document.getElementById('container'));\n",title:{en:"Basic Fixer",zh:"Fixer 基础用法"},filename:"fixer.jsx",isNew:!1}],icon:"",id:"linter-only",title:{en:"Linter Only",zh:"仅使用 Linter"},childrenKey:"demos",order:2},{demos:[{id:"basic",screenshot:"https://gw.alipayobjects.com/mdn/rms_fabca5/afts/img/A*0D3FRZknLz8AAAAAAAAAAAAAARQnAQ",source:"import React, { useState, useEffect } from 'react';\n\nimport { Advisor } from '@antv/chart-advisor';\nimport ReactDOM from 'react-dom';\nimport { specToG6Plot } from '@antv/antv-spec';\n\nconst GraphPanel = () => {\n  const [selectedAdviceId, setAdviceId] = useState(-1);\n  const [data, setData] = useState(null);\n  const [advices, setAdvices] = useState([]);\n  const myAdvisor = new Advisor(); // Initialize an advisor\n\n  useEffect(() => {\n    // Prepare nodes-links data to be visualize\n    fetch('https://gw.alipayobjects.com/os/antfincdn/WHs4so6mX/ava-basic-graph-demo.json')\n      .then((res) => res.json())\n      .then((data) => {\n        setData(data);\n      });\n  }, []);\n\n  useEffect(() => {\n    // Pass the data to advise function. The advices are returns in order from largest score to smallest score. You could select an advice to visualize data\n    if (data) {\n      const advices = myAdvisor.advise({ data });\n      setAdvices(advices);\n      setAdviceId(0);\n    }\n  }, [data]);\n\n  useEffect(() => {\n    // use antvspec-to-g6 adaptor to convert the advice to g6 configuration and render the plot\n    const advice = advices[selectedAdviceId];\n    if (advice) {\n      specToG6Plot(advice.spec, document.getElementById('graphCanvas'));\n    }\n  }, [selectedAdviceId]);\n\n  const handleAdviceSelect = (e) => {\n    setAdviceId(e.target.value);\n  };\n\n  return (\n    <div className=\"graph-panel-container\">\n      <select onChange={handleAdviceSelect} style={{ width: 160 }}>\n        {advices.map((advice, index) => {\n          return (\n            <option value={index} key={index}>\n              {`Advice${index}: ${advice.score}`}\n            </option>\n          );\n        })}\n      </select>\n      <div id=\"graphCanvas\"></div>\n    </div>\n  );\n};\n\nReactDOM.render(<GraphPanel />, document.getElementById('container'));\n",title:{en:"Automatic node-links visualization",zh:"自动可视化点边（关系型）数据"},filename:"basic.jsx",isNew:!1},{id:"tree",screenshot:"https://gw.alipayobjects.com/mdn/rms_fabca5/afts/img/A*swl0Sq88vagAAAAAAAAAAAAAARQnAQ",source:"import { Advisor } from '@antv/chart-advisor';\nimport { specToG6Plot } from '@antv/antv-spec';\n\n// Prepare hierachical data: some entities have a parent-child relationship with each other\nfetch('https://gw.alipayobjects.com/os/antfincdn/0cfrQND8L/ava-knowledgetree-demo.json')\n  .then((res) => res.json())\n  .then((data) => {\n    // Initialize an advisor and pass the data to its advise function\n    const myAdvisor = new Advisor();\n    const advices = myAdvisor.advise({ data });\n\n    // The advices are returns in order from largest score to smallest score, you can choose the best advice to generate visualization\n    const bestAdvice = advices[0];\n    if (bestAdvice) {\n      const { spec } = bestAdvice;\n      const container = document.getElementById('container');\n      specToG6Plot(spec, container);\n    }\n  });\n",title:{en:"Automatic hierarchy visualization",zh:"自动可视化层次型数据"},filename:"tree.jsx",isNew:!1},{id:"table",screenshot:"https://gw.alipayobjects.com/mdn/rms_fabca5/afts/img/A*y_3aR6iCG0MAAAAAAAAAAAAAARQnAQ",source:"import { Advisor } from '@antv/chart-advisor';\nimport { specToG6Plot } from '@antv/antv-spec';\n\n// Prepare tabular data that describe relations: each row of data represents an edge\nfetch('https://gw.alipayobjects.com/os/antfincdn/h7Bil5Cia/ava-eurocredit-data.json')\n  .then((res) => res.json())\n  .then((data) => {\n    // specify which fields are used for source and target\n    const extra = {\n      sourceKey: 'Creditor',\n      targetKey: 'Debtor',\n    };\n\n    // Initialize an advisor and pass the data to its advise function\n    const myAdvisor = new Advisor();\n    const advices = myAdvisor.advise({ data, options: { extra } });\n\n    // The advices are returns in order from largest score to smallest score, you can choose the best advice to generate visualization\n    const bestAdvice = advices[0];\n    if (bestAdvice) {\n      const { spec } = bestAdvice;\n      const container = document.getElementById('container');\n      specToG6Plot(spec, container);\n    }\n  });\n",title:{en:"Show relations in tabular data",zh:"从表格数据中发现并展示关系"},filename:"table.jsx",isNew:!1},{id:"sankey",screenshot:"https://gw.alipayobjects.com/mdn/rms_fabca5/afts/img/A*58fVRbZm_xEAAAAAAAAAAAAAARQnAQ",source:"import { Advisor } from '@antv/chart-advisor';\nimport G6 from '@antv/g6';\nimport { specToG6Config } from '@antv/antv-spec';\n\nconst myAdvisor = new Advisor(); // Initialize an advisor\n// Prepare data to be visualized\nfetch('https://gw.alipayobjects.com/os/antfincdn/I6yCahSrA/ava-sankey-demo.json')\n  .then((res) => res.json())\n  .then((data) => {\n    // specify which fields are used as declaring children\n    const extra = {\n      childrenKey: 'to',\n    };\n    // Get the recommended configurations and combine it with your own preferences to customize your visualization\n    const advices = myAdvisor.advise({ data, options: { extra } });\n    const bestAdvice = advices[0];\n    if (bestAdvice) {\n      const { spec } = bestAdvice;\n      // customized configurations by modify recommended spec\n      spec.layer[0].nodes.mark = 'rect';\n      spec.layer[0].links.mark = 'cubic-vertical';\n      const g6Cfg = specToG6Config(spec); // the recommended configurations\n      // customized configurations by modify render configurations\n      const myCfg = {\n        layout: {\n          type: 'dagre',\n          rankdir: 'LR',\n          nodesep: 20,\n          ranksep: 40,\n        },\n      };\n      const graph = new G6.Graph({\n        container: 'container',\n        ...g6Cfg.cfg,\n        ...myCfg,\n      });\n      graph.data(g6Cfg.data);\n      graph.render();\n    }\n  });\n",title:{en:"User customized graph visualization",zh:"用户自定义配置的图可视化"},filename:"sankey.jsx",isNew:!1}],icon:"",id:"relation",title:{en:"Visualize Relations Automatically",zh:"图可视化推荐"},childrenKey:"demos",order:3}],childrenKey:"examples"},{id:"lite-insight",title:{zh:"智能洞察（LiteInsight）",en:"LiteInsight"},examples:[{demos:[{id:"basic",screenshot:"https://gw.alipayobjects.com/zos/antfincdn/zt2jXO97%262/li-basic.gif",source:"import React, { useState, useEffect } from 'react';\n\nimport ReactDOM from 'react-dom';\nimport { Spin } from 'antd';\nimport { getDataInsights } from '@antv/lite-insight';\nimport { JSONView, TableView, StepBar } from 'antv-site-demo-rc';\n\nconst App = () => {\n  const [result, setResult] = useState({});\n  const [data, setData] = useState([]);\n  const [currentStep, setCurrentStep] = useState(0);\n  const [loading, setLoading] = useState(true);\n\n  const getInsights = async () => {\n    fetch('https://cdn.jsdelivr.net/npm/vega-datasets@2.2.0/data/gapminder.json')\n      .then((res) => res.json())\n      .then((data) => {\n        if (data) {\n          setData(data);\n          const insightResult = getDataInsights(data);\n          setResult(insightResult);\n          setLoading(false);\n        }\n      });\n  };\n\n  useEffect(() => {\n    getInsights();\n  }, []);\n\n  const dataContent = <TableView data={data} />;\n\n  const insightsContent = <JSONView json={result} rjvConfigs={{ collapsed: 2 }} />;\n\n  const steps = [\n    {\n      title: 'Data',\n      desc: 'Source data:',\n      content: dataContent,\n    },\n    {\n      title: 'Insights',\n      desc: 'Insights extracted from data:',\n      content: insightsContent,\n    },\n  ];\n\n  return (\n    <>\n      <StepBar current={currentStep} onChange={setCurrentStep} steps={steps} />\n      <p>{steps[currentStep].desc}</p>\n\n      <div className=\"steps-content\" style={{ height: 'calc(100% - 80px)' }}>\n        <Spin spinning={loading}>{steps[currentStep].content}</Spin>\n      </div>\n    </>\n  );\n};\n\nReactDOM.render(<App />, document.getElementById('container'));\n",title:{zh:"基础用法",en:"Basic usage"},filename:"basic.jsx",isNew:!1},{id:"custom",screenshot:"https://gw.alipayobjects.com/zos/antfincdn/ixkElKx8UT/li-custom-measures.gif",source:"import React, { useState, useEffect } from 'react';\n\nimport ReactDOM from 'react-dom';\nimport { Spin } from 'antd';\nimport { getDataInsights } from '@antv/lite-insight';\nimport { JSONView, TableView, StepBar } from 'antv-site-demo-rc';\n\nconst App = () => {\n  const [result, setResult] = useState({});\n  const [data, setData] = useState([]);\n  const [currentStep, setCurrentStep] = useState(0);\n  const [loading, setLoading] = useState(true);\n\n  const getInsights = async () => {\n    fetch('https://cdn.jsdelivr.net/npm/vega-datasets@2.2.0/data/gapminder.json')\n      .then((res) => res.json())\n      .then((data) => {\n        if (data) {\n          setData(data);\n          const insightResult = getDataInsights(data, {\n            // 取前10个洞察\n            // limit the result insights to only the top 20\n            limit: 10,\n            // 自定义指标字段\n            // custom measures\n            measures: [\n              { field: 'life_expect', method: 'MEAN' },\n              { field: 'pop', method: 'SUM' },\n              { field: 'fertility', method: 'MEAN' },\n            ],\n            // 自定义维度字段\n            // custom dimensions\n            dimensions: ['country', 'year'],\n          });\n          setResult(insightResult);\n          setLoading(false);\n        }\n      });\n  };\n\n  useEffect(() => {\n    getInsights();\n  }, []);\n\n  const dataContent = <TableView data={data} />;\n\n  const insightsContent = <JSONView json={result} rjvConfigs={{ collapsed: 2 }} />;\n\n  const steps = [\n    {\n      title: 'Data',\n      desc: 'Source data:',\n      content: dataContent,\n    },\n    {\n      title: 'Insights',\n      desc: 'Insights extracted from data:',\n      content: insightsContent,\n    },\n  ];\n\n  return (\n    <>\n      <StepBar current={currentStep} onChange={setCurrentStep} steps={steps} />\n      <p>{steps[currentStep].desc}</p>\n\n      <div className=\"steps-content\" style={{ height: 'calc(100% - 80px)' }}>\n        <Spin spinning={loading}>{steps[currentStep].content}</Spin>\n      </div>\n    </>\n  );\n};\n\nReactDOM.render(<App />, document.getElementById('container'));\n",title:{zh:"自定义指标和维度",en:"Custom measures and dimensions"},filename:"custom.jsx",isNew:!1}],icon:"",id:"basic",title:{en:"Auto-Insights",zh:"自动洞察"},childrenKey:"demos",order:0},{demos:[{id:"index",screenshot:"https://gw.alipayobjects.com/zos/antfincdn/FaGQ69%24bZ8/pipeline-mini.gif",source:"import React, { useState, useEffect, useCallback } from 'react';\n\nimport ReactDOM from 'react-dom';\nimport { Spin, Switch } from 'antd';\nimport { getDataInsights } from '@antv/lite-insight';\nimport { InsightCard, JSONView, TableView, StepBar } from 'antv-site-demo-rc';\n\nconst App = () => {\n  const [data, setData] = useState([]);\n  const [lang, setLang] = useState('en-US');\n  const [result, setResult] = useState({});\n  const [insightLoading, setInsightLoading] = useState(true);\n  const [currentStep, setCurrentStep] = useState(0);\n\n  const getInsights = useCallback(async () => {\n    setInsightLoading(true);\n    let inputData = data;\n    if (inputData.length === 0) {\n      const res = await fetch('https://cdn.jsdelivr.net/npm/vega-datasets@2.2.0/data/gapminder.json');\n      const fetchData = await res.json();\n      if (fetchData) {\n        setData(fetchData);\n        inputData = fetchData;\n      }\n    }\n    setTimeout(() => {\n      const insightResult = getDataInsights(inputData, {\n        limit: 10,\n        measures: [\n          { field: 'life_expect', method: 'MEAN' },\n          { field: 'pop', method: 'SUM' },\n          { field: 'fertility', method: 'MEAN' },\n        ],\n        // 洞察结果中会增加对应的可视化展示方案（基于g2plot）\n        // the corresponding visualization scheme will be added to the insight results (based on g2plot)\n        visualization: {\n          // language of insight description\n          // 输出洞察解释语言\n          lang,\n        },\n      });\n      setResult(insightResult);\n      setInsightLoading(false);\n    });\n  }, [lang]);\n\n  useEffect(() => {\n    getInsights();\n  }, [lang]);\n\n  const dataContent = <TableView data={data} />;\n\n  const insightsContent = <JSONView json={result} rjvConfigs={{ collapsed: 2 }} />;\n\n  const plotContent = (\n    <div key=\"plot\" style={{ flex: 5, height: '100%' }}>\n      <Switch\n        spinning={insightLoading}\n        checked={lang === 'zh-CN'}\n        checkedChildren=\"中文\"\n        unCheckedChildren=\"英文\"\n        onChange={(newVal) => {\n          setLang(newVal ? 'zh-CN' : 'en-US');\n        }}\n      />\n      {result.insights &&\n        result.insights.map((item, index) => <InsightCard key={index} insightInfo={item} height={400} />)}\n    </div>\n  );\n\n  const steps = [\n    {\n      title: 'Data',\n      desc: 'Source data:',\n      content: dataContent,\n    },\n    {\n      title: 'Insights',\n      desc: 'Insights extracted from data:',\n      content: insightsContent,\n    },\n    {\n      title: 'Visualization',\n      desc: 'Represent insight with visualization.',\n      content: plotContent,\n    },\n  ];\n\n  return (\n    <>\n      <StepBar current={currentStep} onChange={setCurrentStep} steps={steps} />\n\n      <p>{steps[currentStep].desc}</p>\n\n      <div style={{ height: 'calc(100% - 80px)' }}>\n        <Spin spinning={insightLoading}>{steps[currentStep].content}</Spin>\n      </div>\n    </>\n  );\n};\n\nReactDOM.render(<App />, document.getElementById('container'));\n",title:{zh:"可视化数据洞察",en:"Data insights visualization"},filename:"index.jsx",isNew:!1}],icon:"",id:"visualization",title:{en:"Visualize Insights",zh:"可视化洞察"},childrenKey:"demos",order:1},{demos:[{id:"insight-type",screenshot:"https://gw.alipayobjects.com/zos/antfincdn/vvRy2rN%24cO/li-custom-type.gif",source:"import React, { useState, useEffect } from 'react';\n\nimport ReactDOM from 'react-dom';\nimport { Spin } from 'antd';\nimport { getDataInsights } from '@antv/lite-insight';\nimport { InsightCard } from 'antv-site-demo-rc';\n\nconst App = () => {\n  const [result, setResult] = useState({});\n  const [loading, setLoading] = useState(true);\n\n  const getInsights = async () => {\n    fetch('https://cdn.jsdelivr.net/npm/vega-datasets@2.2.0/data/gapminder.json')\n      .then((res) => res.json())\n      .then((data) => {\n        if (data) {\n          const insightResult = getDataInsights(data, {\n            limit: 10,\n            measures: [\n              { field: 'life_expect', method: 'MEAN' },\n              { field: 'pop', method: 'SUM' },\n              { field: 'fertility', method: 'MEAN' },\n            ],\n            visualization: true,\n            // 只提取categoryOutlier类型的洞察\n            // extract categoryOutlier\n            insightTypes: ['category_outlier'],\n          });\n          setResult(insightResult);\n          setLoading(false);\n        }\n      });\n  };\n\n  useEffect(() => {\n    getInsights();\n  }, []);\n\n  return (\n    <>\n      <h2 style={{ borderBottom: '1px solid #e9e9e9' }}>Insight list</h2>\n      <Spin spinning={loading} style={{ marginTop: 80 }}>\n        <div style={{ width: '100%' }}>\n          {result.insights &&\n            result.insights.map((item, index) => <InsightCard key={index} insightInfo={item} height={400} />)}\n        </div>\n      </Spin>\n    </>\n  );\n};\n\nReactDOM.render(<App />, document.getElementById('container'));\n",title:{zh:"自定义洞察类型",en:"Custom insight types"},filename:"insight-type.jsx",isNew:!1},{id:"impact",screenshot:"https://gw.alipayobjects.com/zos/antfincdn/WZQxVppHR%26/li-impact-measure.gif",source:"import React, { useState, useEffect } from 'react';\n\nimport ReactDOM from 'react-dom';\nimport { Spin } from 'antd';\nimport { getDataInsights } from '@antv/lite-insight';\nimport { InsightCard } from 'antv-site-demo-rc';\n\nconst App = () => {\n  const [result, setResult] = useState({});\n  const [loading, setLoading] = useState(true);\n\n  const getInsights = async () => {\n    fetch('https://cdn.jsdelivr.net/npm/vega-datasets@2.2.0/data/gapminder.json')\n      .then((res) => res.json())\n      .then((data) => {\n        if (data) {\n          const insightResult = getDataInsights(data, {\n            limit: 10,\n            measures: [\n              { field: 'life_expect', method: 'MEAN' },\n              { field: 'pop', method: 'SUM' },\n              { field: 'fertility', method: 'MEAN' },\n            ],\n            visualization: true,\n            // 自定义影响力（Impact）分数的计算指标\n            // set the measures of the impact score\n            impactMeasures: [\n              { field: 'life_expect', method: 'COUNT' },\n              { field: 'pop', method: 'COUNT' },\n              { field: 'fertility', method: 'COUNT' },\n            ],\n            // 自定义影响力（Impact）分数在洞察分数中的权重（0 ~ 1）\n            // adjust the calculation weight of the relevant factors (significance, impact) in the calculation of the insight score.\n            impactWeight: 0.5,\n          });\n          setResult(insightResult);\n          setLoading(false);\n        }\n      });\n  };\n\n  useEffect(() => {\n    getInsights();\n  }, []);\n\n  return (\n    <>\n      <h2 style={{ borderBottom: '1px solid #e9e9e9' }}>Insight list</h2>\n      <Spin spinning={loading} style={{ marginTop: 80 }}>\n        <div style={{ width: '100%' }}>\n          {result.insights &&\n            result.insights.map((item, index) => <InsightCard key={index} insightInfo={item} height={400} />)}\n        </div>\n      </Spin>\n    </>\n  );\n};\n\nReactDOM.render(<App />, document.getElementById('container'));\n",title:{zh:"自定义影响力指标和权重",en:"Custom Impact measures and weight"},filename:"impact.jsx",isNew:!1},{id:"homogeneous",screenshot:"https://gw.alipayobjects.com/zos/antfincdn/onsB512jmI/li-homogeneous.gif",source:"import React, { useState, useEffect } from 'react';\n\nimport ReactDOM from 'react-dom';\nimport { Spin } from 'antd';\nimport { getDataInsights } from '@antv/lite-insight';\nimport { InsightCard } from 'antv-site-demo-rc';\n\nconst App = () => {\n  const [result, setResult] = useState({});\n  const [loading, setLoading] = useState(true);\n\n  const getInsights = async () => {\n    fetch('https://cdn.jsdelivr.net/npm/vega-datasets@2.2.0/data/gapminder.json')\n      .then((res) => res.json())\n      .then((data) => {\n        if (data) {\n          const insightResult = getDataInsights(data, {\n            limit: 10,\n            measures: [\n              { field: 'life_expect', method: 'MEAN' },\n              { field: 'pop', method: 'SUM' },\n              { field: 'fertility', method: 'MEAN' },\n            ],\n            visualization: true,\n            // 开启共性/例外模式的提取\n            // enable the extraction of homogeneous data patterns\n            homogeneous: true,\n          });\n          setResult(insightResult);\n          setLoading(false);\n        }\n      });\n  };\n\n  useEffect(() => {\n    getInsights();\n  }, []);\n\n  return (\n    <>\n      <h2 style={{ borderBottom: '1px solid #e9e9e9' }}>Insight list</h2>\n      <Spin spinning={loading} style={{ marginTop: 80 }}>\n        <div style={{ width: '100%' }}>\n          {result.homogeneousInsights &&\n            result.homogeneousInsights.map((item, index) => (\n              <InsightCard key={index} insightInfo={item} height={400} />\n            ))}\n        </div>\n      </Spin>\n    </>\n  );\n};\n\nReactDOM.render(<App />, document.getElementById('container'));\n",title:{zh:"提取共性/例外模式",en:"Extract homogeneous data patterns"},filename:"homogeneous.jsx",isNew:!1}],icon:"",id:"custom",title:{en:"Advanced Usages",zh:"高级使用"},childrenKey:"demos",order:2}],childrenKey:"examples"},{id:"smart-board",title:{zh:"增强展现（SmartBoard）",en:"SmartBoard"},examples:[{demos:[{id:"usage",screenshot:"https://gw.alipayobjects.com/mdn/rms_fabca5/afts/img/A*LnFrS6VsND8AAAAAAAAAAAAAARQnAQ",source:"/* eslint react/prop-types: 0 */\n\nimport React, { useState, useEffect } from 'react';\n\nimport ReactDOM from 'react-dom';\nimport { SmartBoard, SmartBoardDashboard, SmartBoardToolbar, SmartBoardSelector } from '@antv/smart-board';\n\nconst cars = 'https://cdn.jsdelivr.net/npm/vega-datasets@2/data/cars.json';\n\nconst chartSample1 = [\n  {\n    dataUrl: cars,\n    subspace: [],\n    dimensions: ['Origin'],\n    measures: ['Horsepower'],\n    fieldInfo: {\n      Origin: {\n        dataType: 'string',\n      },\n      Horsepower: {\n        dataType: 'number',\n      },\n    },\n    insightType: 'outlier',\n    score: 0.5,\n    chartType: 'column_chart',\n  },\n  {\n    dataUrl: cars,\n    subspace: [],\n    dimensions: ['Year'],\n    measures: ['Acceleration'],\n    insightType: 'trend',\n    score: 0.8,\n    chartType: 'line_chart',\n  },\n  {\n    dataUrl: cars,\n    subspace: [],\n    dimensions: ['Origin'],\n    measures: ['Miles_per_Gallon'],\n    insightType: 'proportion',\n    score: 0.6,\n    chartType: 'pie_chart',\n  },\n  {\n    dataUrl: cars,\n    subspace: [],\n    dimensions: ['Cylinders', 'Origin'],\n    measures: ['Displacement'],\n    insightType: 'extreme',\n    score: 0.85,\n    chartType: 'grouped_column_chart',\n  },\n  {\n    dataUrl: cars,\n    subspace: [],\n    dimensions: ['Year', 'Origin'],\n    measures: ['Weight_in_lbs'],\n    insightType: 'trend',\n    score: 0.2,\n    chartType: 'line_chart',\n  },\n  {\n    dataUrl: cars,\n    subspace: [],\n    dimensions: ['Year'],\n    measures: ['Displacement'],\n    insightType: 'trend',\n    score: 0.7,\n    chartType: 'line_chart',\n  },\n];\n\nconst gapminder = 'https://cdn.jsdelivr.net/npm/vega-datasets@2/data/gapminder.json';\n\nconst chartSample2 = [\n  {\n    dataUrl: gapminder,\n    subspace: [],\n    dimensions: ['country'],\n    measures: ['fertility'],\n    fieldInfo: {\n      country: {\n        dataType: 'string',\n      },\n      Horsepower: {\n        dataType: 'number',\n      },\n    },\n    insightType: 'outlier',\n    score: 0.5,\n    chartType: 'column_chart',\n  },\n  {\n    dataUrl: gapminder,\n    subspace: [],\n    dimensions: ['year'],\n    measures: ['pop'],\n    insightType: 'distribution',\n    score: 0.7,\n    chartType: 'line_chart',\n  },\n  {\n    dataUrl: gapminder,\n    subspace: [],\n    dimensions: ['cluster'],\n    measures: ['fertility'],\n    insightType: 'proportion',\n    score: 0.6,\n    chartType: 'pie_chart',\n  },\n  {\n    dataUrl: gapminder,\n    subspace: [],\n    dimensions: ['country', 'cluster'],\n    measures: ['pop'],\n    insightType: 'extreme',\n    score: 0.85,\n    chartType: 'grouped_column_chart',\n  },\n  {\n    dataUrl: gapminder,\n    subspace: [],\n    dimensions: ['year', 'country'],\n    measures: ['pop'],\n    insightType: 'trend',\n    score: 0.2,\n    chartType: 'line_chart',\n  },\n  {\n    dataUrl: gapminder,\n    subspace: [],\n    dimensions: ['year'],\n    measures: ['pop'],\n    insightType: 'trend',\n    score: 0.8,\n    chartType: 'line_chart',\n  },\n];\n\nconst CHART_SAMPLE_LIST = [chartSample1, chartSample2];\n\nconst App = () => {\n  const [interactionMode, changeMode] = useState('defaultMode');\n  const [chartSamplesIndex, changeSampleIndex] = useState(0);\n\n  const boardSamples = {\n    sampleNames: ['chartSample1', 'chartSample2'],\n    initSampleMode: 'defaultMode',\n  };\n\n  const [smartBoard, setSmartBoard] = useState(new SmartBoard(CHART_SAMPLE_LIST[chartSamplesIndex]));\n\n  useEffect(() => {\n    const updateSmartBoard = new SmartBoard(CHART_SAMPLE_LIST[chartSamplesIndex]);\n    setSmartBoard(updateSmartBoard);\n  }, [CHART_SAMPLE_LIST[chartSamplesIndex]]);\n\n  return (\n    <div className=\"page\">\n      <SmartBoardSelector changeSampleIndex={changeSampleIndex} samples={boardSamples} />\n      <SmartBoardToolbar changeMode={changeMode} />\n      <SmartBoardDashboard\n        chartList={CHART_SAMPLE_LIST[chartSamplesIndex]}\n        interactionMode={interactionMode}\n        chartGraph={smartBoard?.chartGraph}\n        chartOrder={smartBoard?.chartOrder('byCluster')}\n        chartCluster={smartBoard?.chartCluster()}\n      />\n    </div>\n  );\n};\n\nReactDOM.render(<App />, document.getElementById('container'));\n",title:{en:"SmartBoard Usage",zh:"SmartBoard 使用"},filename:"usage.jsx",isNew:!1},{id:"auto",screenshot:"https://gw.alipayobjects.com/mdn/rms_fabca5/afts/img/A*TvXCTLMzULIAAAAAAAAAAAAAARQnAQ",source:"/* eslint-disable react/prop-types */\nimport React, { useState, useEffect } from 'react';\n\nimport ReactDOM from 'react-dom';\nimport { Spin } from 'antd';\nimport { getDataInsights } from '@antv/lite-insight';\nimport { SmartBoard, SmartBoardDashboard, insights2Board } from '@antv/smart-board';\nimport { TableView, StepBar } from 'antv-site-demo-rc';\n\nconst App = () => {\n  const [insights, setInsights] = useState({});\n  const [data, setData] = useState([]);\n  const [currentStep, setCurrentStep] = useState(0);\n  const [smartBoard, setSmartBoard] = useState();\n  const [isLoading, setIsLoading] = useState(true);\n\n  const fetchDataset = async () => {\n    fetch('https://cdn.jsdelivr.net/npm/vega-datasets@2.2.0/data/gapminder.json')\n      .then((res) => res.json())\n      .then((data) => {\n        if (data) {\n          setData(data);\n          const insightResult = getDataInsights(data, {\n            limit: 10,\n            measures: [\n              { field: 'life_expect', method: 'MEAN' },\n              { field: 'pop', method: 'SUM' },\n              { field: 'fertility', method: 'MEAN' },\n            ],\n            // 洞察结果中会增加对应的可视化展示方案（基于g2plot）\n            visualization: true,\n          });\n          setInsights(insightResult);\n          setIsLoading(false);\n        }\n      });\n  };\n\n  useEffect(() => {\n    fetchDataset();\n  }, []);\n\n  useEffect(() => {\n    if (insights?.insights) {\n      const updateSmartBoard = new SmartBoard(insights2Board(insights.insights));\n      setSmartBoard(updateSmartBoard);\n    }\n  }, [insights]);\n\n  const dataContent = <TableView data={data} />;\n\n  const plotContent = (\n    <div className=\"page\">\n      <SmartBoardDashboard\n        chartList={insights2Board(insights.insights)}\n        interactionMode={'defaultMode'}\n        hasInsight={true}\n        chartGraph={smartBoard?.chartGraph}\n        chartOrder={smartBoard?.chartOrder('byInsightScore')}\n        chartCluster={smartBoard?.chartCluster()}\n      />\n    </div>\n  );\n\n  const steps = [\n    {\n      title: 'Data',\n      desc: 'Source data:',\n      content: dataContent,\n    },\n    {\n      title: 'Dashboard',\n      desc: 'Represent insight with smart-board.',\n      content: plotContent,\n    },\n  ];\n\n  return (\n    <>\n      <StepBar current={currentStep} onChange={setCurrentStep} steps={steps} />\n\n      <p>{steps[currentStep].desc}</p>\n\n      <div className=\"steps-content\" style={{ height: 'calc(100% - 80px)' }}>\n        <Spin spinning={isLoading}>{steps[currentStep].content}</Spin>\n      </div>\n    </>\n  );\n};\n\nReactDOM.render(<App />, document.getElementById('container'));\n",title:{en:"SmartBoard with Insights",zh:"智能洞察 + SmartBoard"},filename:"auto.jsx",isNew:!1}],icon:"",id:"basic",title:{en:"SmartBoard Usage",zh:"SmartBoard 使用"},childrenKey:"demos",order:0}],childrenKey:"examples"},{id:"plugins",title:{zh:"插件",en:"Plugins"},examples:[{demos:[{id:"data-advisor",screenshot:"https://gw.alipayobjects.com/mdn/rms_fabca5/afts/img/A*EJqOQr8DoLEAAAAAAAAAAAAAARQnAQ",source:"import React, { useEffect } from 'react';\n\nimport ReactDOM from 'react-dom';\nimport { specToG2Plot } from '@antv/antv-spec';\nimport { colorSimulation, colorToHex, COLOR_BLINDNESS_SIMULATION_TYPES } from '@antv/smart-color';\nimport { Advisor } from '@antv/chart-advisor';\n\nconst myAdvisor = new Advisor();\n\n// contants\n\nconst defaultData = [\n  { year: '2007', sales: 28 },\n  { year: '2008', sales: 55 },\n  { year: '2009', sales: 43 },\n  { year: '2010', sales: 91 },\n  { year: '2011', sales: 81 },\n  { year: '2012', sales: 53 },\n  { year: '2013', sales: 19 },\n  { year: '2014', sales: 87 },\n  { year: '2015', sales: 52 },\n];\n\nconst initColor = {\n  model: 'rgb',\n  value: { r: 126, g: 63, b: 235 },\n};\n\nconst SIMULATION_TYPES = [...COLOR_BLINDNESS_SIMULATION_TYPES, 'grayscale'];\n\nconst initSimMethod = SIMULATION_TYPES[0];\n\nconst simulatedColor = colorSimulation(initColor, initSimMethod);\n\nconst themeColor = {\n  /**\n   * `primaryColor`: color in Hex string\n   * such as '#ff5733'\n   * specify color for ChartAdvisor\n   */\n  primaryColor: colorToHex(simulatedColor),\n};\n\nconst App = () => {\n  const currentAdvice = 0;\n  const advices = myAdvisor.advise({\n    data: defaultData,\n    options: {\n      theme: themeColor,\n    },\n  });\n\n  useEffect(() => {\n    if (advices[currentAdvice]) {\n      specToG2Plot(advices[currentAdvice].spec, document.getElementById('vis'));\n    }\n  }, []);\n\n  return (\n    <>\n      <p>Render chart with specified color theme.</p>\n\n      <div className=\"vis-content\" style={{ height: 'calc(100% - 80px)' }}>\n        <div id=\"vis\" key=\"plot\" style={{ flex: 5, height: '100%' }}></div>\n      </div>\n    </>\n  );\n};\n\nReactDOM.render(<App />, document.getElementById('container'));\n",title:{en:"Charts with specific color",zh:"指定颜色的图表推荐"},filename:"data-advisor.jsx",isNew:!1},{id:"auto-color",screenshot:"https://gw.alipayobjects.com/mdn/rms_fabca5/afts/img/A*c3fdQ5dW0YsAAAAAAAAAAAAAARQnAQ",source:"import React, { useEffect } from 'react';\n\nimport ReactDOM from 'react-dom';\nimport { specToG2Plot } from '@antv/antv-spec';\nimport { colorToHex } from '@antv/smart-color';\nimport { Advisor } from '@antv/chart-advisor';\n\nconst myAdvisor = new Advisor();\n\n// contants\n\nconst defaultData = [\n  { type: '石油', value: 1200 },\n  { type: '电子', value: 250 },\n  { type: '机械', value: 180 },\n  { type: '食物', value: 150 },\n  { type: '服饰', value: 100 },\n];\n\nconst initColor = {\n  model: 'rgb',\n  value: { r: 255, g: 36, b: 12 },\n};\n\nconst theme = {\n  primaryColor: colorToHex(initColor),\n};\n\n/**\n * `genType`: color generation type\n * options are listed as follows:\n * discrete types:\n * 'monochromatic', 'analogous'\n * '单色配色', '近似配色'\n * categorical types:\n * 'polychromatic', 'split-complementary', 'triadic', 'tetradic'\n * '多色', '补色分割', '三等分配色', '矩形配色'\n */\nconst genType = 'polychromatic';\n\n/**\n * `simType`: color simulation type\n * options are listed as follows:\n * 'normal', 'protanomaly', 'deuteranomaly', 'tritanomaly',\n * '正常', '红色弱', '绿色弱', '蓝色弱',\n * 'protanopia', 'deuteranopia', 'tritanopia',\n * '红色盲', '绿色盲', '蓝色盲',\n * 'achromatomaly', 'achromatopsia'\n * '全色弱', '全色盲'\n */\nconst simType = 'protanomaly';\n\nconst setColors = {\n  /**\n   * `themeColor`: color in Hex string\n   * such as '#ff5733'\n   * theme of SmartColor mode\n   * default is lite blue\n   */\n  themeColor: colorToHex(initColor),\n  /**\n   * `colorSchemeType`: color generation type\n   * contains discrete and categorical types\n   * default value is 'monochromatic' or 'polychromatic' based on data type\n   */\n  colorSchemeType: genType,\n  /**\n   * `simulationType`: color simulation type\n   * employed for color blindness and grayscale\n   * default value is 'normal'\n   */\n  simulationType: simType,\n};\n\nconst App = () => {\n  const currentAdvice = 0;\n  const advices = myAdvisor.advise({\n    data: defaultData,\n    options: {\n      theme,\n    },\n  });\n  const advicesWithColor = myAdvisor.advise({\n    data: defaultData,\n    /**\n     * `smartColor`: SmartColor mode on/off\n     * SmartColor mode contains default color options\n     */\n    smartColor: true,\n    /**\n     * `colorOptions`: SmartColor options\n     * This variable is optional for SmartColor mode\n     */\n    colorOptions: setColors,\n  });\n\n  useEffect(() => {\n    if (advices[currentAdvice]) {\n      specToG2Plot(advices[currentAdvice].spec, document.getElementById('init'));\n    }\n    if (advicesWithColor[currentAdvice]) {\n      specToG2Plot(advicesWithColor[currentAdvice].spec, document.getElementById('smart'));\n    }\n  }, []);\n\n  return (\n    <>\n      <p>Render chart with specified color theme.</p>\n\n      <div className=\"init-content\" style={{ height: 'calc(55% - 80px)' }}>\n        <div id=\"init\" key=\"plot\" style={{ flex: 5, height: '100%' }}></div>\n      </div>\n\n      <p>\n        Render chart with SmartColor using <b>{genType}</b> method for <b>{simType}</b> color blindness.\n      </p>\n\n      <div className=\"smart-content\" style={{ height: 'calc(55% - 80px)' }}>\n        <div id=\"smart\" key=\"plot\" style={{ flex: 5, height: '100%' }}></div>\n      </div>\n    </>\n  );\n};\n\nReactDOM.render(<App />, document.getElementById('container'));\n",title:{en:"Charts with auto color",zh:"自动配色的图表推荐"},filename:"auto-color.jsx",isNew:!1}],icon:"",id:"smart-color",title:{en:"SmartColor Usage",zh:"智能配色使用"},childrenKey:"demos",order:0},{demos:[{id:"insight-text-vis",screenshot:"https://gw.alipayobjects.com/mdn/rms_fabca5/afts/img/A*PDUTRb6_xgkAAAAAAAAAAAAAARQnAQ",source:"import React, { useState, useEffect } from 'react';\n\nimport ReactDOM from 'react-dom';\nimport insertCss from 'insert-css';\nimport { Spin, Switch, Form, Row, Col } from 'antd';\nimport { getDataInsights } from '@antv/lite-insight';\nimport { PlotCard } from 'antv-site-demo-rc';\n\ninsertCss(`\n.ntv-metric-name {\n  font-weight: bold;\n}\n\n.ntv-metric-value {\n  color: #2797fe;\n}\n\n.ntv-trend-desc,.ntv-dim-value {\n  color: #000;\n  background-color: #e9e9e9;\n}\n`);\n\nconst Paragraph = ({ phrases }) => {\n  return (\n    <p className=\"ntv-p\">\n      {Array.isArray(phrases)\n        ? phrases.map((phrase) => {\n            if (phrase.type === 'text') return phrase.value;\n            if (phrase.type === 'entity')\n              return (\n                <span className={`ntv-value ntv-${phrase.metadata.entityType.replace('_', '-')}`}>{phrase.value}</span>\n              );\n            return null;\n          })\n        : phrases}\n    </p>\n  );\n};\n\nconst App = () => {\n  const [result, setResult] = useState({});\n  const [loading, setLoading] = useState(true);\n  const [summaryType, setSummaryType] = useState('schema');\n\n  const getInsights = async () => {\n    fetch('https://cdn.jsdelivr.net/npm/vega-datasets@2.2.0/data/gapminder.json')\n      .then((res) => res.json())\n      .then((data) => {\n        if (data) {\n          const insightResult = getDataInsights(data, {\n            limit: 10,\n            measures: [\n              { field: 'life_expect', method: 'MEAN' },\n              { field: 'pop', method: 'SUM' },\n              { field: 'fertility', method: 'MEAN' },\n            ],\n            // 配置文本插件\n            // config text plugin\n            visualization: { summaryType },\n            insightTypes: ['category_outlier'],\n          });\n          setResult(insightResult);\n          setLoading(false);\n        }\n      });\n  };\n\n  useEffect(() => {\n    getInsights();\n  }, [summaryType]);\n\n  return (\n    <>\n      <Row style={{ borderBottom: '1px solid #e9e9e9' }} justify=\"space-between\">\n        <Col>Insight list</Col>\n        <Col>\n          <Form.Item label=\"Use text plugin（是否开启文本插件）\">\n            <Switch\n              checked={summaryType === 'schema'}\n              onChange={(checked) => {\n                setSummaryType(checked ? 'schema' : 'text');\n              }}\n            />\n          </Form.Item>\n        </Col>\n      </Row>\n\n      <Spin spinning={loading} style={{ marginTop: 80 }}>\n        <div style={{ width: '100%' }}>\n          {result.insights &&\n            result.insights.map((item, index) => (\n              <div key={index}>\n                <PlotCard\n                  chartType={item.visualizationSchemas[0].chartType}\n                  data={item.data}\n                  schema={item.visualizationSchemas[0].chartSchema}\n                  caption={item.visualizationSchemas[0].caption}\n                />\n                {item.visualizationSchemas[0].insightSummaries.map((phrases, index) => (\n                  <Paragraph phrases={phrases} key={index} />\n                ))}\n              </div>\n            ))}\n        </div>\n      </Spin>\n    </>\n  );\n};\n\nReactDOM.render(<App />, document.getElementById('container'));\n",title:{en:"Insight with text schema",zh:"文本插件显示洞察描述"},filename:"insight-text-vis.jsx",isNew:!1}],icon:"",id:"text-schema",title:{en:"Text Schema",zh:"文本插件"},childrenKey:"demos",order:1}],childrenKey:"examples"},{id:"others",title:{zh:"其他",en:"Others"},examples:[{demos:[{id:"usage",screenshot:"https://gw.alipayobjects.com/zos/antfincdn/ObPIQYzZJU/thumbnails-usage.png",source:"/* eslint-disable quotes */\nimport React from 'react';\n\nimport ReactDOM from 'react-dom';\nimport { Thumbnail } from '@antv/thumbnails-component';\nimport Thumbnails, { BAR_CHART } from '@antv/thumbnails';\n\nconst App = () => {\n  return (\n    <>\n      <code>{`<Thumbnail svg={svgCode} alt={name} width={200} />`}</code>\n      <div>\n        {Object.keys(Thumbnails)\n          .slice(0, 5)\n          .map((chart) => {\n            const { svgCode, name } = Thumbnails[chart];\n            return <Thumbnail key={chart} svg={svgCode} alt={name} width={200} />;\n          })}\n      </div>\n\n      <br />\n\n      <code>{`<Thumbnail chart={'pie_chart'} width=\"200\" />`}</code>\n      <div>\n        <Thumbnail chart={'pie_chart'} width=\"200\" />\n      </div>\n\n      <code>{`<Thumbnail svg={Thumbnails.radar_chart.svgCode} width=\"200\" />`}</code>\n      <div>\n        <Thumbnail svg={Thumbnails.radar_chart.svgCode} width=\"200\" />\n      </div>\n\n      <code>{`<img src={\\`data:image/svg+xml;utf8,\\${encodeURIComponent(BAR_CHART.svgCode)}\\`} />`}</code>\n      <div>\n        <img src={`data:image/svg+xml;utf8,${encodeURIComponent(BAR_CHART.svgCode)}`} width=\"200\" />\n      </div>\n    </>\n  );\n};\n\nReactDOM.render(<App />, document.getElementById('container'));\n",title:{en:"Thumbnails Usage",zh:"Thumbnails 缩略图用法"},filename:"usage.jsx",isNew:!1},{id:"all",screenshot:"https://gw.alipayobjects.com/zos/antfincdn/YQGTC0Zq%26t/thumbnails-viewall.gif",source:"import React from 'react';\n\nimport ReactDOM from 'react-dom';\nimport { Switch } from 'antd';\nimport insertCss from 'insert-css';\nimport { Thumbnail } from '@antv/thumbnails-component';\nimport Thumbnails from '@antv/thumbnails';\n\ninsertCss(`\n  .demo-thumbnails-all-grid {\n    width: 190px;\n    height: 190px;\n    display: inline-block;\n    margin: 6px 6px;\n    box-shadow: rgba(0, 0, 0, 0.12) 0px 0px 4px 0px;\n  }\n\n  .demo-thumbnails-all-intro {\n    text-align: center;\n    height: 40px;\n    background: rgb(246, 246, 246);\n    padding: 2px 0;\n  }\n\n  .demo-thumbnails-all-intro h1 {\n    font-size: 12px;\n    height: 20px;\n    line-height: 20px;\n    color: rgb(74, 74, 74);\n    margin: 0;\n  }\n\n  .demo-thumbnails-all-intro h2 {\n    font-size: 10px;\n    height: 16px;\n    line-height: 16px;\n    font-style: italic;\n    color: rgba(74, 74, 74, 0.4);\n    margin: 0;\n  }\n\n  .demo-thumbnails-all-thumbnail {\n    text-align: center;\n  }\n\n  .demo-thumbnails-all-dark {\n    background-color: #262626;\n  }\n\n  .demo-thumbnails-all-thumbnail img {\n    margin: 4px;\n    width: 140px;\n    height: 140px;\n  }\n\n  .demo-thumbnails-all-thumbnail img.demo-thumbnails-all-hasBorder {\n    outline: 1px solid red;\n  }\n`);\n\nconst chartTypeList = Object.keys(Thumbnails);\n\nclass App extends React.Component {\n  state = {\n    showImgBorder: false,\n    bgDarkMode: false,\n  };\n\n  onChange = () => {\n    const { showImgBorder } = this.state;\n\n    this.setState({\n      showImgBorder: !showImgBorder,\n    });\n  };\n\n  onBGChange = () => {\n    const { bgDarkMode } = this.state;\n\n    this.setState({\n      bgDarkMode: !bgDarkMode,\n    });\n  };\n\n  render() {\n    const { showImgBorder, bgDarkMode } = this.state;\n\n    const liItem = chartTypeList.map((item) => {\n      const { id, name } = Thumbnails[item];\n\n      return (\n        <div className=\"demo-thumbnails-all-grid\" key={id}>\n          <div className=\"demo-thumbnails-all-intro\">\n            <h1>{name}</h1>\n            <h2>{id}</h2>\n          </div>\n          <div className={`demo-thumbnails-all-thumbnail demo-thumbnails-all-${bgDarkMode ? 'dark' : 'light'}`}>\n            <Thumbnail chart={id} className={showImgBorder ? 'demo-thumbnails-all-hasBorder' : null} />\n          </div>\n        </div>\n      );\n    });\n\n    return (\n      <div>\n        ChartBorder: <Switch onChange={this.onChange} size=\"small\" /> | DarkMode:{' '}\n        <Switch onChange={this.onBGChange} size=\"small\" />\n        <br />\n        {liItem}\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<App />, document.getElementById('container'));\n",title:{en:"View All Thumbnails",zh:"Thumbnails 缩略图一览"},filename:"all.jsx",isNew:!1},{id:"select",screenshot:"https://gw.alipayobjects.com/zos/antfincdn/zwo0GDlia6/thumbnails-select.gif",source:"import { CaretDownOutlined } from '@ant-design/icons';\nimport Thumbnails from '@antv/thumbnails';\nimport { Thumbnail } from '@antv/thumbnails-component';\nimport { Dropdown, Menu } from 'antd';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nconst chartTypeList = Object.keys(Thumbnails);\n\nclass App extends React.Component {\n  state = {\n    current: chartTypeList[0],\n  };\n\n  handleClick = (e) => {\n    this.setState({\n      current: e.key,\n    });\n  };\n\n  render() {\n    const { current } = this.state;\n    const liItem = chartTypeList.map((item) => {\n      return <Menu.Item key={item}>{item}</Menu.Item>;\n    });\n    const menu = (\n      <Menu onClick={this.handleClick} selectedKeys={[this.state.current]}>\n        {liItem}\n      </Menu>\n    );\n\n    return (\n      <div>\n        <Thumbnail chart={current} width=\"200\" height=\"200\" />\n        <Dropdown menu={menu} placement=\"bottomLeft\" trigger={['click']}>\n          <a className=\"ant-dropdown-link\" onClick={(e) => e.preventDefault()}>\n            Select Chart Type <CaretDownOutlined />\n          </a>\n        </Dropdown>\n        <span> : {current}</span>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<App />, document.getElementById('container'));\n",title:{en:"Select Chart by Thumbnails",zh:"通过缩略图选择图表"},filename:"select.jsx",isNew:!1}],icon:"",id:"thumbnails",title:{en:"Thumbnails",zh:"Thumbnails 缩略图"},childrenKey:"demos",order:0}],childrenKey:"examples"}]}},children:n})}}}]);